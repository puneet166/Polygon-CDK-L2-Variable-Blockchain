{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "5068d749665c7b1ad365497372d743751989c4bc740dfc5522335ea50b1ebacd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "42c61815544f59521667c4036b791f5a147dc1374ac0e239fbd66f9730788e37",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1139_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1139_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1139_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/governance/TimelockController.sol:TimelockController": {
        "src": "@openzeppelin/contracts/governance/TimelockController.sol:26",
        "version": {
          "withMetadata": "4a7df4a97d6c2adbaec2c16901cd6e3864a3d470b3c94bd55be5eca0b8d04ee8",
          "withoutMetadata": "4a7df4a97d6c2adbaec2c16901cd6e3864a3d470b3c94bd55be5eca0b8d04ee8",
          "linkedWithoutMetadata": "4a7df4a97d6c2adbaec2c16901cd6e3864a3d470b3c94bd55be5eca0b8d04ee8"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address[],address[],address)",
          "()",
          "supportsInterface(bytes4)",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimelockController",
            "src": "@openzeppelin/contracts/governance/TimelockController.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1139_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_timestamps",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:33"
            },
            {
              "label": "_minDelay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1139_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1139_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "214fb7cff42c569190af62281b4a4f08d21c295e0195ee7e74a6379a2e114ff6",
          "withoutMetadata": "214fb7cff42c569190af62281b4a4f08d21c295e0195ee7e74a6379a2e114ff6",
          "linkedWithoutMetadata": "214fb7cff42c569190af62281b4a4f08d21c295e0195ee7e74a6379a2e114ff6"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "248cc0e322879745ea06d81ff8c4afe4f754128b1023ffe80b486a419d534247",
          "withoutMetadata": "057260439aff53021f10927e5615e6b4466040de399d0b641aee82f4f2b681e2",
          "linkedWithoutMetadata": "057260439aff53021f10927e5615e6b4466040de399d0b641aee82f4f2b681e2"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "d604f428acc036697159cd5d1f8ee3eb69fd3a7ca920855cb81a055a164e8733",
          "withoutMetadata": "d604f428acc036697159cd5d1f8ee3eb69fd3a7ca920855cb81a055a164e8733",
          "linkedWithoutMetadata": "d604f428acc036697159cd5d1f8ee3eb69fd3a7ca920855cb81a055a164e8733"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:34"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "4880c4696c69bfb4794b33e0449635011ba566bfcbd1e17123fc2d777db29026",
          "withoutMetadata": "ba44a4a7d262aca83529fad987bca0f4fb803c81286fdf8e55d1725ec6c67c07",
          "linkedWithoutMetadata": "ba44a4a7d262aca83529fad987bca0f4fb803c81286fdf8e55d1725ec6c67c07"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol:ERC20PresetFixedSupply": {
        "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol:21",
        "version": {
          "withMetadata": "60e3c2ffdc45c886f239e44e6b9bd5dc414204b8abfedf4000e90c23f5e7aca3",
          "withoutMetadata": "3f9cbacc67e9774ecb95003ffe19eca23d6d9636841453401891113d25d8708f",
          "linkedWithoutMetadata": "3f9cbacc67e9774ecb95003ffe19eca23d6d9636841453401891113d25d8708f"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetFixedSupply",
            "src": "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "7040a70c550f077af7afb58c7e1565c00ce8bb822f9fc6fa5abe70d8b9969473",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Create2.sol:Create2": {
        "src": "@openzeppelin/contracts/utils/Create2.sol:15",
        "version": {
          "withMetadata": "a3b527e91dc7c01ae16acc49b8e51049194eac835552ab7eacf3b4b7d9512ed2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "a588b74892d8b3b9cb629eb2ac14828c462c707b9040272651790c1f9601b274",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:11",
        "version": {
          "withMetadata": "ecb52cf2407c90079e470d2e94a9bbf63370312b937088b3cdfa51a20e6f2efa",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "b63103a0a8915db074087b37cb4506df462b3ff72ccd4a72bb533d39e242b706",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "6a95e71d67e489062b35800030d37c0a00e508abe60ff08f86e5bc0f7fd5963e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "contracts/CDKDataCommittee.sol:CDKDataCommittee": {
        "src": "contracts/CDKDataCommittee.sol:8",
        "version": {
          "withMetadata": "bb87cd274d9136bd72a9750c6476da24e99e44a61d28c5c7d240cdf8d41bea2b",
          "withoutMetadata": "27229be131bac448e1a36265fd70db8882cf9e6cb94a91223922c21846a414ba",
          "linkedWithoutMetadata": "27229be131bac448e1a36265fd70db8882cf9e6cb94a91223922c21846a414ba"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ICDKDataCommitteeErrors.sol:ICDKDataCommitteeErrors"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "initialize()",
          "setupCommittee(uint256,string[],bytes)",
          "getAmountOfMembers()",
          "verifySignatures(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "requiredAmountOfSignatures",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "CDKDataCommittee",
              "src": "contracts/CDKDataCommittee.sol:26"
            },
            {
              "label": "committeeHash",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "CDKDataCommittee",
              "src": "contracts/CDKDataCommittee.sol:29"
            },
            {
              "label": "members",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_struct(Member)6013_storage)dyn_storage",
              "contract": "CDKDataCommittee",
              "src": "contracts/CDKDataCommittee.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Member)6013_storage)dyn_storage": {
              "label": "struct CDKDataCommittee.Member[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Member)6013_storage": {
              "label": "struct CDKDataCommittee.Member",
              "members": [
                {
                  "label": "url",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addr",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/CDKValidium.sol:CDKValidium": {
        "src": "contracts/CDKValidium.sol:21",
        "version": {
          "withMetadata": "04ab75fc7e7d3585fd39f57538a73003f6ee968ef7f39c1667ec46418f925f9a",
          "withoutMetadata": "688741626ae1ac246fd8fddf5e62b121fbfe0d9cd61037fb6a20598448c63913",
          "linkedWithoutMetadata": "688741626ae1ac246fd8fddf5e62b121fbfe0d9cd61037fb6a20598448c63913"
        },
        "inherit": [
          "contracts/interfaces/ICDKValidiumErrors.sol:ICDKValidiumErrors",
          "contracts/lib/EmergencyManager.sol:EmergencyManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable"
        ],
        "methods": [
          "(address,address,address,address,address,uint64,uint64)",
          "initialize((address,address,uint64,address,uint64),bytes32,string,string,string)",
          "sequenceBatches(struct CDKValidium.BatchData[],address,bytes)",
          "verifyBatches(uint64,uint64,uint64,bytes32,bytes32,bytes32[24])",
          "verifyBatchesTrustedAggregator(uint64,uint64,uint64,bytes32,bytes32,bytes32[24])",
          "consolidatePendingState(uint64)",
          "forceBatch(bytes,uint256)",
          "sequenceForceBatches(struct CDKValidium.ForcedBatchData[])",
          "setTrustedSequencer(address)",
          "setTrustedSequencerURL(string)",
          "setTrustedAggregator(address)",
          "setTrustedAggregatorTimeout(uint64)",
          "setPendingStateTimeout(uint64)",
          "setMultiplierBatchFee(uint16)",
          "setVerifyBatchTimeTarget(uint64)",
          "setForceBatchTimeout(uint64)",
          "activateForceBatches()",
          "transferAdminRole(address)",
          "acceptAdminRole()",
          "overridePendingState(uint64,uint64,uint64,uint64,bytes32,bytes32,bytes32[24])",
          "proveNonDeterministicPendingState(uint64,uint64,uint64,uint64,bytes32,bytes32,bytes32[24])",
          "activateEmergencyState(uint64)",
          "deactivateEmergencyState()",
          "getForcedBatchFee()",
          "getLastVerifiedBatch()",
          "isPendingStateConsolidable(uint64)",
          "calculateRewardPerBatch()",
          "getInputSnarkBytes(uint64,uint64,bytes32,bytes32,bytes32)",
          "checkStateRootInsidePrime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CDKValidium",
            "src": "contracts/CDKValidium.sol:383"
          },
          {
            "kind": "state-variable-immutable",
            "name": "matic",
            "src": "contracts/CDKValidium.sol:149"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rollupVerifier",
            "src": "contracts/CDKValidium.sol:152"
          },
          {
            "kind": "state-variable-immutable",
            "name": "globalExitRootManager",
            "src": "contracts/CDKValidium.sol:155"
          },
          {
            "kind": "state-variable-immutable",
            "name": "bridgeAddress",
            "src": "contracts/CDKValidium.sol:158"
          },
          {
            "kind": "state-variable-immutable",
            "name": "dataCommitteeAddress",
            "src": "contracts/CDKValidium.sol:161"
          },
          {
            "kind": "state-variable-immutable",
            "name": "chainID",
            "src": "contracts/CDKValidium.sol:164"
          },
          {
            "kind": "state-variable-immutable",
            "name": "forkID",
            "src": "contracts/CDKValidium.sol:167"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)10_storage",
              "contract": "EmergencyManager",
              "src": "contracts/lib/EmergencyManager.sol:23"
            },
            {
              "label": "isEmergencyState",
              "offset": 0,
              "slot": "111",
              "type": "t_bool",
              "contract": "EmergencyManager",
              "src": "contracts/lib/EmergencyManager.sol:26"
            },
            {
              "label": "verifyBatchTimeTarget",
              "offset": 1,
              "slot": "111",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:171"
            },
            {
              "label": "multiplierBatchFee",
              "offset": 9,
              "slot": "111",
              "type": "t_uint16",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:174"
            },
            {
              "label": "trustedSequencer",
              "offset": 11,
              "slot": "111",
              "type": "t_address",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:177"
            },
            {
              "label": "batchFee",
              "offset": 0,
              "slot": "112",
              "type": "t_uint256",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:180"
            },
            {
              "label": "forcedBatches",
              "offset": 0,
              "slot": "113",
              "type": "t_mapping(t_uint64,t_bytes32)",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:186"
            },
            {
              "label": "sequencedBatches",
              "offset": 0,
              "slot": "114",
              "type": "t_mapping(t_uint64,t_struct(SequencedBatchData)6376_storage)",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:190"
            },
            {
              "label": "lastTimestamp",
              "offset": 0,
              "slot": "115",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:193"
            },
            {
              "label": "lastBatchSequenced",
              "offset": 8,
              "slot": "115",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:196"
            },
            {
              "label": "lastForceBatchSequenced",
              "offset": 16,
              "slot": "115",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:199"
            },
            {
              "label": "lastForceBatch",
              "offset": 24,
              "slot": "115",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:202"
            },
            {
              "label": "lastVerifiedBatch",
              "offset": 0,
              "slot": "116",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:205"
            },
            {
              "label": "trustedAggregator",
              "offset": 8,
              "slot": "116",
              "type": "t_address",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:208"
            },
            {
              "label": "batchNumToStateRoot",
              "offset": 0,
              "slot": "117",
              "type": "t_mapping(t_uint64,t_bytes32)",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:212"
            },
            {
              "label": "trustedSequencerURL",
              "offset": 0,
              "slot": "118",
              "type": "t_string_storage",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:215"
            },
            {
              "label": "networkName",
              "offset": 0,
              "slot": "119",
              "type": "t_string_storage",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:218"
            },
            {
              "label": "pendingStateTransitions",
              "offset": 0,
              "slot": "120",
              "type": "t_mapping(t_uint256,t_struct(PendingState)6386_storage)",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:222"
            },
            {
              "label": "lastPendingState",
              "offset": 0,
              "slot": "121",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:225"
            },
            {
              "label": "lastPendingStateConsolidated",
              "offset": 8,
              "slot": "121",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:228"
            },
            {
              "label": "pendingStateTimeout",
              "offset": 16,
              "slot": "121",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:231"
            },
            {
              "label": "trustedAggregatorTimeout",
              "offset": 24,
              "slot": "121",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:235"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "122",
              "type": "t_address",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:238"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "123",
              "type": "t_address",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:241"
            },
            {
              "label": "forceBatchTimeout",
              "offset": 20,
              "slot": "123",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:244"
            },
            {
              "label": "isForcedBatchDisallowed",
              "offset": 28,
              "slot": "123",
              "type": "t_bool",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:247"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]",
              "numberOfBytes": "320"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(PendingState)6386_storage)": {
              "label": "mapping(uint256 => struct CDKValidium.PendingState)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(SequencedBatchData)6376_storage)": {
              "label": "mapping(uint64 => struct CDKValidium.SequencedBatchData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(PendingState)6386_storage": {
              "label": "struct CDKValidium.PendingState",
              "members": [
                {
                  "label": "timestamp",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastVerifiedBatch",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "exitRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(SequencedBatchData)6376_storage": {
              "label": "struct CDKValidium.SequencedBatchData",
              "members": [
                {
                  "label": "accInputHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "sequencedTimestamp",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "previousLastBatchSequenced",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/CDKValidiumTimelock.sol:CDKValidiumTimelock": {
        "src": "contracts/CDKValidiumTimelock.sol:12",
        "version": {
          "withMetadata": "d0f0f016b7e99353e79527908a948904eb60383ebc32263a526ec8ac8c59dfea",
          "withoutMetadata": "d0f0f016b7e99353e79527908a948904eb60383ebc32263a526ec8ac8c59dfea",
          "linkedWithoutMetadata": "d0f0f016b7e99353e79527908a948904eb60383ebc32263a526ec8ac8c59dfea"
        },
        "inherit": [
          "@openzeppelin/contracts/governance/TimelockController.sol:TimelockController",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address[],address[],address,address)",
          "getMinDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CDKValidiumTimelock",
            "src": "contracts/CDKValidiumTimelock.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "cdkValidium",
            "src": "contracts/CDKValidiumTimelock.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1139_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_timestamps",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:33"
            },
            {
              "label": "_minDelay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1139_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1139_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/PolygonZkEVMBridge.sol:PolygonZkEVMBridge": {
        "src": "contracts/PolygonZkEVMBridge.sol:19",
        "version": {
          "withMetadata": "8a32dca9a00afb3b0cb0a8dae4950d01d83745f3e2764302c2716b7c79a92d56",
          "withoutMetadata": "42f816355510d8c3c338a67c7ed599d4b8aba172938b3b95547ce33866216784",
          "linkedWithoutMetadata": "42f816355510d8c3c338a67c7ed599d4b8aba172938b3b95547ce33866216784"
        },
        "inherit": [
          "contracts/interfaces/IPolygonZkEVMBridge.sol:IPolygonZkEVMBridge",
          "contracts/lib/EmergencyManager.sol:EmergencyManager",
          "contracts/lib/DepositContract.sol:DepositContract",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "contracts/lib/GlobalExitRootLib.sol:GlobalExitRootLib"
        ],
        "methods": [
          "initialize(uint32,address,address)",
          "bridgeAsset(uint32,address,uint256,address,bool,bytes)",
          "bridgeMessage(uint32,address,bool,bytes)",
          "claimAsset(bytes32[32],uint32,bytes32,bytes32,uint32,address,uint32,address,uint256,bytes)",
          "claimMessage(bytes32[32],uint32,bytes32,bytes32,uint32,address,uint32,address,uint256,bytes)",
          "precalculatedWrapperAddress(uint32,address,string,string,uint8)",
          "getTokenWrappedAddress(uint32,address)",
          "activateEmergencyState()",
          "deactivateEmergencyState()",
          "isClaimed(uint256)",
          "updateGlobalExitRoot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_branch",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_bytes32)32_storage",
              "contract": "DepositContract",
              "src": "contracts/lib/DepositContract.sol:25"
            },
            {
              "label": "depositCount",
              "offset": 0,
              "slot": "83",
              "type": "t_uint256",
              "contract": "DepositContract",
              "src": "contracts/lib/DepositContract.sol:28"
            },
            {
              "label": "_gap",
              "offset": 0,
              "slot": "84",
              "type": "t_array(t_uint256)10_storage",
              "contract": "DepositContract",
              "src": "contracts/lib/DepositContract.sol:34"
            },
            {
              "label": "_gap",
              "offset": 0,
              "slot": "94",
              "type": "t_array(t_uint256)10_storage",
              "contract": "EmergencyManager",
              "src": "contracts/lib/EmergencyManager.sol:23"
            },
            {
              "label": "isEmergencyState",
              "offset": 0,
              "slot": "104",
              "type": "t_bool",
              "contract": "EmergencyManager",
              "src": "contracts/lib/EmergencyManager.sol:26"
            },
            {
              "label": "networkID",
              "offset": 1,
              "slot": "104",
              "type": "t_uint32",
              "contract": "PolygonZkEVMBridge",
              "src": "contracts/PolygonZkEVMBridge.sol:51"
            },
            {
              "label": "globalExitRootManager",
              "offset": 5,
              "slot": "104",
              "type": "t_contract(IBasePolygonZkEVMGlobalExitRoot)10779",
              "contract": "PolygonZkEVMBridge",
              "src": "contracts/PolygonZkEVMBridge.sol:54"
            },
            {
              "label": "lastUpdatedDepositCount",
              "offset": 25,
              "slot": "104",
              "type": "t_uint32",
              "contract": "PolygonZkEVMBridge",
              "src": "contracts/PolygonZkEVMBridge.sol:57"
            },
            {
              "label": "claimedBitMap",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "PolygonZkEVMBridge",
              "src": "contracts/PolygonZkEVMBridge.sol:60"
            },
            {
              "label": "tokenInfoToWrappedToken",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "PolygonZkEVMBridge",
              "src": "contracts/PolygonZkEVMBridge.sol:63"
            },
            {
              "label": "wrappedTokenToTokenInfo",
              "offset": 0,
              "slot": "107",
              "type": "t_mapping(t_address,t_struct(TokenInformation)9024_storage)",
              "contract": "PolygonZkEVMBridge",
              "src": "contracts/PolygonZkEVMBridge.sol:66"
            },
            {
              "label": "polygonZkEVMaddress",
              "offset": 0,
              "slot": "108",
              "type": "t_address",
              "contract": "PolygonZkEVMBridge",
              "src": "contracts/PolygonZkEVMBridge.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)32_storage": {
              "label": "bytes32[32]",
              "numberOfBytes": "1024"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]",
              "numberOfBytes": "320"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IBasePolygonZkEVMGlobalExitRoot)10779": {
              "label": "contract IBasePolygonZkEVMGlobalExitRoot",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(TokenInformation)9024_storage)": {
              "label": "mapping(address => struct PolygonZkEVMBridge.TokenInformation)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(TokenInformation)9024_storage": {
              "label": "struct PolygonZkEVMBridge.TokenInformation",
              "members": [
                {
                  "label": "originNetwork",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "originTokenAddress",
                  "type": "t_address",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/PolygonZkEVMGlobalExitRoot.sol:PolygonZkEVMGlobalExitRoot": {
        "src": "contracts/PolygonZkEVMGlobalExitRoot.sol:11",
        "version": {
          "withMetadata": "f1afeccfdc2a5fd9b8bfd8200a4a1792cf0f0ed1b979270de60171aaa8c94fe2",
          "withoutMetadata": "dd231c1910527f618da128733e48e2bf3b871a1bd90a6765be305ca38036fc02",
          "linkedWithoutMetadata": "dd231c1910527f618da128733e48e2bf3b871a1bd90a6765be305ca38036fc02"
        },
        "inherit": [
          "contracts/interfaces/IPolygonZkEVMGlobalExitRoot.sol:IPolygonZkEVMGlobalExitRoot",
          "contracts/interfaces/IBasePolygonZkEVMGlobalExitRoot.sol:IBasePolygonZkEVMGlobalExitRoot"
        ],
        "libraries": [
          "contracts/lib/GlobalExitRootLib.sol:GlobalExitRootLib"
        ],
        "methods": [
          "(address,address)",
          "updateExitRoot(bytes32)",
          "getLastGlobalExitRoot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolygonZkEVMGlobalExitRoot",
            "src": "contracts/PolygonZkEVMGlobalExitRoot.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "bridgeAddress",
            "src": "contracts/PolygonZkEVMGlobalExitRoot.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rollupAddress",
            "src": "contracts/PolygonZkEVMGlobalExitRoot.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "lastRollupExitRoot",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes32",
              "contract": "PolygonZkEVMGlobalExitRoot",
              "src": "contracts/PolygonZkEVMGlobalExitRoot.sol:19"
            },
            {
              "label": "lastMainnetExitRoot",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "PolygonZkEVMGlobalExitRoot",
              "src": "contracts/PolygonZkEVMGlobalExitRoot.sol:22"
            },
            {
              "label": "globalExitRootMap",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PolygonZkEVMGlobalExitRoot",
              "src": "contracts/PolygonZkEVMGlobalExitRoot.sol:25"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/PolygonZkEVMGlobalExitRootL2.sol:PolygonZkEVMGlobalExitRootL2": {
        "src": "contracts/PolygonZkEVMGlobalExitRootL2.sol:10",
        "version": {
          "withMetadata": "23797a9433e0a344532c996971d26e23a3ffd5a439433f243e1a3a9d94cabc30",
          "withoutMetadata": "ef1c3c2242c320309c90011aa608afdfe1e35e5450876fee3c489a6f3a4e491e",
          "linkedWithoutMetadata": "ef1c3c2242c320309c90011aa608afdfe1e35e5450876fee3c489a6f3a4e491e"
        },
        "inherit": [
          "contracts/interfaces/IBasePolygonZkEVMGlobalExitRoot.sol:IBasePolygonZkEVMGlobalExitRoot"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "updateExitRoot(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolygonZkEVMGlobalExitRootL2",
            "src": "contracts/PolygonZkEVMGlobalExitRootL2.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "bridgeAddress",
            "src": "contracts/PolygonZkEVMGlobalExitRootL2.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "globalExitRootMap",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PolygonZkEVMGlobalExitRootL2",
              "src": "contracts/PolygonZkEVMGlobalExitRootL2.sol:17"
            },
            {
              "label": "lastRollupExitRoot",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "PolygonZkEVMGlobalExitRootL2",
              "src": "contracts/PolygonZkEVMGlobalExitRootL2.sol:21"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/deployment/CDKValidiumDeployer.sol:CDKValidiumDeployer": {
        "src": "contracts/deployment/CDKValidiumDeployer.sol:11",
        "version": {
          "withMetadata": "2af3a37f9e26fa81acb788ba023f886edc672b803b7738175f247eafd0035cb4",
          "withoutMetadata": "b9fca9e34a76c64119e3e94dd68c757f547dd362a27e94e5f312ade2f7064394",
          "linkedWithoutMetadata": "b9fca9e34a76c64119e3e94dd68c757f547dd362a27e94e5f312ade2f7064394"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Create2.sol:Create2",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "(address)",
          "deployDeterministic(uint256,bytes32,bytes)",
          "deployDeterministicAndCall(uint256,bytes32,bytes,bytes)",
          "functionCall(address,bytes,uint256)",
          "predictDeterministicAddress(bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CDKValidiumDeployer",
            "src": "contracts/deployment/CDKValidiumDeployer.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/IBasePolygonZkEVMGlobalExitRoot.sol:IBasePolygonZkEVMGlobalExitRoot": {
        "src": "contracts/interfaces/IBasePolygonZkEVMGlobalExitRoot.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateExitRoot(bytes32)",
          "globalExitRootMap(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/IBridgeMessageReceiver.sol:IBridgeMessageReceiver": {
        "src": "contracts/interfaces/IBridgeMessageReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onMessageReceived(address,uint32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/ICDKDataCommittee.sol:ICDKDataCommittee": {
        "src": "contracts/interfaces/ICDKDataCommittee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifySignatures(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/ICDKDataCommitteeErrors.sol:ICDKDataCommitteeErrors": {
        "src": "contracts/interfaces/ICDKDataCommitteeErrors.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/ICDKValidiumErrors.sol:ICDKValidiumErrors": {
        "src": "contracts/interfaces/ICDKValidiumErrors.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/IPolygonZkEVMBridge.sol:IPolygonZkEVMBridge": {
        "src": "contracts/interfaces/IPolygonZkEVMBridge.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "bridgeAsset(uint32,address,uint256,address,bool,bytes)",
          "bridgeMessage(uint32,address,bool,bytes)",
          "claimAsset(bytes32[32],uint32,bytes32,bytes32,uint32,address,uint32,address,uint256,bytes)",
          "claimMessage(bytes32[32],uint32,bytes32,bytes32,uint32,address,uint32,address,uint256,bytes)",
          "updateGlobalExitRoot()",
          "activateEmergencyState()",
          "deactivateEmergencyState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/IPolygonZkEVMGlobalExitRoot.sol:IPolygonZkEVMGlobalExitRoot": {
        "src": "contracts/interfaces/IPolygonZkEVMGlobalExitRoot.sol:6",
        "inherit": [
          "contracts/interfaces/IBasePolygonZkEVMGlobalExitRoot.sol:IBasePolygonZkEVMGlobalExitRoot"
        ],
        "libraries": [],
        "methods": [
          "getLastGlobalExitRoot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/IVerifierRollup.sol:IVerifierRollup": {
        "src": "contracts/interfaces/IVerifierRollup.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32[24],uint256[1])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/DepositContract.sol:DepositContract": {
        "src": "contracts/lib/DepositContract.sol:10",
        "version": {
          "withMetadata": "cdc82c95a3c011b8ff31173858e355ce42730c72d1ff29e4dfbc1b6c036d619d",
          "withoutMetadata": "e11b8a39d9d629c6a8827e2b9399558339ca5fe2daf1ab315ae023f37c697b8f",
          "linkedWithoutMetadata": "e11b8a39d9d629c6a8827e2b9399558339ca5fe2daf1ab315ae023f37c697b8f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "getDepositRoot()",
          "verifyMerkleProof(bytes32,bytes32[32],uint32,bytes32)",
          "getLeafValue(uint8,uint32,address,uint32,address,uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_branch",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_bytes32)32_storage",
              "contract": "DepositContract",
              "src": "contracts/lib/DepositContract.sol:25"
            },
            {
              "label": "depositCount",
              "offset": 0,
              "slot": "83",
              "type": "t_uint256",
              "contract": "DepositContract",
              "src": "contracts/lib/DepositContract.sol:28"
            },
            {
              "label": "_gap",
              "offset": 0,
              "slot": "84",
              "type": "t_array(t_uint256)10_storage",
              "contract": "DepositContract",
              "src": "contracts/lib/DepositContract.sol:34"
            }
          ],
          "types": {
            "t_array(t_bytes32)32_storage": {
              "label": "bytes32[32]",
              "numberOfBytes": "1024"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]",
              "numberOfBytes": "320"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/EmergencyManager.sol:EmergencyManager": {
        "src": "contracts/lib/EmergencyManager.sol:8",
        "version": {
          "withMetadata": "e9f79ca9682db2bc40a335843d0d2a4bd6cbf6e2d7ca89f122457ffc7e6bf618",
          "withoutMetadata": "4c377dee20fcf5028072b3011b4360e1ab226e459530f3c92932e64ef475c3ad",
          "linkedWithoutMetadata": "4c377dee20fcf5028072b3011b4360e1ab226e459530f3c92932e64ef475c3ad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_gap",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_uint256)10_storage",
              "contract": "EmergencyManager",
              "src": "contracts/lib/EmergencyManager.sol:23"
            },
            {
              "label": "isEmergencyState",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "EmergencyManager",
              "src": "contracts/lib/EmergencyManager.sol:26"
            }
          ],
          "types": {
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]",
              "numberOfBytes": "320"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/GlobalExitRootLib.sol:GlobalExitRootLib": {
        "src": "contracts/lib/GlobalExitRootLib.sol:8",
        "version": {
          "withMetadata": "ff3a842ff734120686e6541de6fe84eafe6964656e63ba1c164f289d93440c4b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/TokenWrapped.sol:TokenWrapped": {
        "src": "contracts/lib/TokenWrapped.sol:7",
        "version": {
          "withMetadata": "1ffbd370be1366ad3f96ed83a20e7d96d59dfabd951963f588ceb00acc9ef501",
          "withoutMetadata": "f4e3ca109ecf03132b926a28e17313053cc68ebf4240eac75fd3f5fd6b3678e2",
          "linkedWithoutMetadata": "f4e3ca109ecf03132b926a28e17313053cc68ebf4240eac75fd3f5fd6b3678e2"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "decimals()",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenWrapped",
            "src": "contracts/lib/TokenWrapped.sol:45"
          },
          {
            "kind": "state-variable-immutable",
            "name": "deploymentChainId",
            "src": "contracts/lib/TokenWrapped.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_DEPLOYMENT_DOMAIN_SEPARATOR",
            "src": "contracts/lib/TokenWrapped.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "bridgeAddress",
            "src": "contracts/lib/TokenWrapped.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimals",
            "src": "contracts/lib/TokenWrapped.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TokenWrapped",
              "src": "contracts/lib/TokenWrapped.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/mocks/DepositContractMock.sol:DepositContractMock": {
        "src": "contracts/mocks/DepositContractMock.sol:10",
        "version": {
          "withMetadata": "ded0ff827cfd1dc5f573abd59dd2dde409d02cf274dc360fa5fdd724e592b9f2",
          "withoutMetadata": "d0c17e3d4c13da164e5ed628ff1ac93f30845056c0d63f26f8d5ab5871caa24d",
          "linkedWithoutMetadata": "d0c17e3d4c13da164e5ed628ff1ac93f30845056c0d63f26f8d5ab5871caa24d"
        },
        "inherit": [
          "contracts/lib/DepositContract.sol:DepositContract",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "deposit(uint8,uint32,address,uint32,address,uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DepositContractMock",
            "src": "contracts/mocks/DepositContractMock.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_branch",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_bytes32)32_storage",
              "contract": "DepositContract",
              "src": "contracts/lib/DepositContract.sol:25"
            },
            {
              "label": "depositCount",
              "offset": 0,
              "slot": "83",
              "type": "t_uint256",
              "contract": "DepositContract",
              "src": "contracts/lib/DepositContract.sol:28"
            },
            {
              "label": "_gap",
              "offset": 0,
              "slot": "84",
              "type": "t_array(t_uint256)10_storage",
              "contract": "DepositContract",
              "src": "contracts/lib/DepositContract.sol:34"
            }
          ],
          "types": {
            "t_array(t_bytes32)32_storage": {
              "label": "bytes32[32]",
              "numberOfBytes": "1024"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]",
              "numberOfBytes": "320"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/mocks/ERC20PermitMock.sol:ERC20PermitMock": {
        "src": "contracts/mocks/ERC20PermitMock.sol:7",
        "version": {
          "withMetadata": "afe0920bedbfaf51720b2b97a04982b00edc7400fe6af3714555edc13692c7cb",
          "withoutMetadata": "9bf5badd6d5d7d057fe152bfd690c1cc62002ed00cccbf3625a516e5c93bdc13",
          "linkedWithoutMetadata": "9bf5badd6d5d7d057fe152bfd690c1cc62002ed00cccbf3625a516e5c93bdc13"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,uint256)",
          "mint(address,uint256)",
          "burn(uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)",
          "getChainId()",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PermitMock",
            "src": "contracts/mocks/ERC20PermitMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20PermitMock",
              "src": "contracts/mocks/ERC20PermitMock.sol:39"
            },
            {
              "label": "NAME_HASH",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20PermitMock",
              "src": "contracts/mocks/ERC20PermitMock.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/mocks/ERC20WeirdMetadata.sol:ERC20WeirdMetadata": {
        "src": "contracts/mocks/ERC20WeirdMetadata.sol:9",
        "version": {
          "withMetadata": "9eedeb284c3487ab863391b86b0302d9e49309b15f3c7e28ff5c84edfd44c3cc",
          "withoutMetadata": "d65d42b03bc9c22fa2e57ecf734aeb6b3e4d700b9a3b2ddef55549faad006425",
          "linkedWithoutMetadata": "d65d42b03bc9c22fa2e57ecf734aeb6b3e4d700b9a3b2ddef55549faad006425"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32,bytes,uint256)",
          "setDecimals(uint256)",
          "toggleIsRevert()",
          "name()",
          "symbol()",
          "decimals()",
          "mint(address,uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20WeirdMetadata",
            "src": "contracts/mocks/ERC20WeirdMetadata.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20WeirdMetadata",
              "src": "contracts/mocks/ERC20WeirdMetadata.sol:13"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20WeirdMetadata",
              "src": "contracts/mocks/ERC20WeirdMetadata.sol:15"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20WeirdMetadata",
              "src": "contracts/mocks/ERC20WeirdMetadata.sol:17"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_bytes32",
              "contract": "ERC20WeirdMetadata",
              "src": "contracts/mocks/ERC20WeirdMetadata.sol:19"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_bytes_storage",
              "contract": "ERC20WeirdMetadata",
              "src": "contracts/mocks/ERC20WeirdMetadata.sol:21"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "ERC20WeirdMetadata",
              "src": "contracts/mocks/ERC20WeirdMetadata.sol:23"
            },
            {
              "label": "isRevert",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "ERC20WeirdMetadata",
              "src": "contracts/mocks/ERC20WeirdMetadata.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/mocks/PolygonZkEVMBridgeMock.sol:PolygonZkEVMBridgeMock": {
        "src": "contracts/mocks/PolygonZkEVMBridgeMock.sol:10",
        "version": {
          "withMetadata": "5a9bdf0c7c4aa4f72e33087682e805ee019ad275b1f22fc166b11186fd68c209",
          "withoutMetadata": "04edb839b0099e1dad410d78ded6cb92e7107b5689f95226941e0a8739bfb994",
          "linkedWithoutMetadata": "04edb839b0099e1dad410d78ded6cb92e7107b5689f95226941e0a8739bfb994"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "contracts/PolygonZkEVMBridge.sol:PolygonZkEVMBridge",
          "contracts/interfaces/IPolygonZkEVMBridge.sol:IPolygonZkEVMBridge",
          "contracts/lib/EmergencyManager.sol:EmergencyManager",
          "contracts/lib/DepositContract.sol:DepositContract",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint32,address,address)",
          "setNetworkID(uint32)",
          "setMaxEtherBridge(uint256)",
          "bridgeAsset(uint32,address,uint256,address,bool,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_branch",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_bytes32)32_storage",
              "contract": "DepositContract",
              "src": "contracts/lib/DepositContract.sol:25"
            },
            {
              "label": "depositCount",
              "offset": 0,
              "slot": "83",
              "type": "t_uint256",
              "contract": "DepositContract",
              "src": "contracts/lib/DepositContract.sol:28"
            },
            {
              "label": "_gap",
              "offset": 0,
              "slot": "84",
              "type": "t_array(t_uint256)10_storage",
              "contract": "DepositContract",
              "src": "contracts/lib/DepositContract.sol:34"
            },
            {
              "label": "_gap",
              "offset": 0,
              "slot": "94",
              "type": "t_array(t_uint256)10_storage",
              "contract": "EmergencyManager",
              "src": "contracts/lib/EmergencyManager.sol:23"
            },
            {
              "label": "isEmergencyState",
              "offset": 0,
              "slot": "104",
              "type": "t_bool",
              "contract": "EmergencyManager",
              "src": "contracts/lib/EmergencyManager.sol:26"
            },
            {
              "label": "networkID",
              "offset": 1,
              "slot": "104",
              "type": "t_uint32",
              "contract": "PolygonZkEVMBridge",
              "src": "contracts/PolygonZkEVMBridge.sol:51"
            },
            {
              "label": "globalExitRootManager",
              "offset": 5,
              "slot": "104",
              "type": "t_contract(IBasePolygonZkEVMGlobalExitRoot)10779",
              "contract": "PolygonZkEVMBridge",
              "src": "contracts/PolygonZkEVMBridge.sol:54"
            },
            {
              "label": "lastUpdatedDepositCount",
              "offset": 25,
              "slot": "104",
              "type": "t_uint32",
              "contract": "PolygonZkEVMBridge",
              "src": "contracts/PolygonZkEVMBridge.sol:57"
            },
            {
              "label": "claimedBitMap",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "PolygonZkEVMBridge",
              "src": "contracts/PolygonZkEVMBridge.sol:60"
            },
            {
              "label": "tokenInfoToWrappedToken",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "PolygonZkEVMBridge",
              "src": "contracts/PolygonZkEVMBridge.sol:63"
            },
            {
              "label": "wrappedTokenToTokenInfo",
              "offset": 0,
              "slot": "107",
              "type": "t_mapping(t_address,t_struct(TokenInformation)9024_storage)",
              "contract": "PolygonZkEVMBridge",
              "src": "contracts/PolygonZkEVMBridge.sol:66"
            },
            {
              "label": "polygonZkEVMaddress",
              "offset": 0,
              "slot": "108",
              "type": "t_address",
              "contract": "PolygonZkEVMBridge",
              "src": "contracts/PolygonZkEVMBridge.sol:69"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "109",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "159",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "160",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "maxEtherBridge",
              "offset": 0,
              "slot": "209",
              "type": "t_uint256",
              "contract": "PolygonZkEVMBridgeMock",
              "src": "contracts/mocks/PolygonZkEVMBridgeMock.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)32_storage": {
              "label": "bytes32[32]",
              "numberOfBytes": "1024"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]",
              "numberOfBytes": "320"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IBasePolygonZkEVMGlobalExitRoot)10779": {
              "label": "contract IBasePolygonZkEVMGlobalExitRoot",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(TokenInformation)9024_storage)": {
              "label": "mapping(address => struct PolygonZkEVMBridge.TokenInformation)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(TokenInformation)9024_storage": {
              "label": "struct PolygonZkEVMBridge.TokenInformation",
              "members": [
                {
                  "label": "originNetwork",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "originTokenAddress",
                  "type": "t_address",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/mocks/PolygonZkEVMGlobalExitRootL2Mock.sol:PolygonZkEVMGlobalExitRootL2Mock": {
        "src": "contracts/mocks/PolygonZkEVMGlobalExitRootL2Mock.sol:10",
        "version": {
          "withMetadata": "24c1cf545e1496f55dbef4e8d40e43e47bdf79fdfef307f30cfabdc1d8332a7b",
          "withoutMetadata": "55a4d30b705723ff236494ac2b64515666dac20b760255e01b5a00cbb9d0fd46",
          "linkedWithoutMetadata": "55a4d30b705723ff236494ac2b64515666dac20b760255e01b5a00cbb9d0fd46"
        },
        "inherit": [
          "contracts/PolygonZkEVMGlobalExitRootL2.sol:PolygonZkEVMGlobalExitRootL2",
          "contracts/interfaces/IBasePolygonZkEVMGlobalExitRoot.sol:IBasePolygonZkEVMGlobalExitRoot"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setLastGlobalExitRoot(bytes32,uint256)",
          "setExitRoot(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolygonZkEVMGlobalExitRootL2Mock",
            "src": "contracts/mocks/PolygonZkEVMGlobalExitRootL2Mock.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "globalExitRootMap",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PolygonZkEVMGlobalExitRootL2",
              "src": "contracts/PolygonZkEVMGlobalExitRootL2.sol:17"
            },
            {
              "label": "lastRollupExitRoot",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "PolygonZkEVMGlobalExitRootL2",
              "src": "contracts/PolygonZkEVMGlobalExitRootL2.sol:21"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/mocks/PolygonZkEVMGlobalExitRootMock.sol:PolygonZkEVMGlobalExitRootMock": {
        "src": "contracts/mocks/PolygonZkEVMGlobalExitRootMock.sol:10",
        "version": {
          "withMetadata": "b39e2f88a7cfaf71e5f21d9cd0a92735a24f97d51b18c25c795396cf2969723c",
          "withoutMetadata": "bdca629cda4beb8279441399a83fe710b0806944f0529d63d457a101e19343e4",
          "linkedWithoutMetadata": "bdca629cda4beb8279441399a83fe710b0806944f0529d63d457a101e19343e4"
        },
        "inherit": [
          "contracts/PolygonZkEVMGlobalExitRoot.sol:PolygonZkEVMGlobalExitRoot",
          "contracts/interfaces/IPolygonZkEVMGlobalExitRoot.sol:IPolygonZkEVMGlobalExitRoot",
          "contracts/interfaces/IBasePolygonZkEVMGlobalExitRoot.sol:IBasePolygonZkEVMGlobalExitRoot"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "setLastGlobalExitRoot(uint256)",
          "setGlobalExitRoot(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolygonZkEVMGlobalExitRootMock",
            "src": "contracts/mocks/PolygonZkEVMGlobalExitRootMock.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "lastRollupExitRoot",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes32",
              "contract": "PolygonZkEVMGlobalExitRoot",
              "src": "contracts/PolygonZkEVMGlobalExitRoot.sol:19"
            },
            {
              "label": "lastMainnetExitRoot",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "PolygonZkEVMGlobalExitRoot",
              "src": "contracts/PolygonZkEVMGlobalExitRoot.sol:22"
            },
            {
              "label": "globalExitRootMap",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PolygonZkEVMGlobalExitRoot",
              "src": "contracts/PolygonZkEVMGlobalExitRoot.sol:25"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/mocks/SequenceBatchesMock.sol:SendData": {
        "src": "contracts/mocks/SequenceBatchesMock.sol:9",
        "version": {
          "withMetadata": "927878418d456e75e9d6caf917e3f9e81a405cb6f0cc1250bd23481b2abcabaa",
          "withoutMetadata": "8abca8dd77245e74cd5f0907bf2f96675800f342fe2e106fcd251093637d1269",
          "linkedWithoutMetadata": "8abca8dd77245e74cd5f0907bf2f96675800f342fe2e106fcd251093637d1269"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "sendData(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "contracts/mocks/Supernets2Mock.sol:CDKValidiumMock": {
        "src": "contracts/mocks/Supernets2Mock.sol:12",
        "version": {
          "withMetadata": "64d28c63f185fecc8c2d362ca29f342c790b9f932d7afce8c5d48ceee4b03c96",
          "withoutMetadata": "70afe51ecf5fb32e50959f8d655fa7e537066d3a9720e8d775c6a620759e614b",
          "linkedWithoutMetadata": "70afe51ecf5fb32e50959f8d655fa7e537066d3a9720e8d775c6a620759e614b"
        },
        "inherit": [
          "contracts/CDKValidium.sol:CDKValidium",
          "contracts/interfaces/ICDKValidiumErrors.sol:ICDKValidiumErrors",
          "contracts/lib/EmergencyManager.sol:EmergencyManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,uint64,uint64)",
          "calculateAccInputHash(bytes32,bytes,bytes32,uint64,address)",
          "getNextSnarkInput(uint64,uint64,uint64,bytes32,bytes32)",
          "setStateRoot(bytes32,uint64)",
          "setVerifiedBatch(uint64)",
          "setSequencedBatch(uint64)",
          "setNetworkName(string)",
          "updateBatchFee(uint64)",
          "setSequencedBatches(uint64,bytes32,uint64,uint64)",
          "trustedVerifyBatchesMock(uint64,uint64,uint64,bytes32,bytes32,uint256[2],uint256[2][2],uint256[2])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CDKValidiumMock",
            "src": "contracts/mocks/Supernets2Mock.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)10_storage",
              "contract": "EmergencyManager",
              "src": "contracts/lib/EmergencyManager.sol:23"
            },
            {
              "label": "isEmergencyState",
              "offset": 0,
              "slot": "111",
              "type": "t_bool",
              "contract": "EmergencyManager",
              "src": "contracts/lib/EmergencyManager.sol:26"
            },
            {
              "label": "verifyBatchTimeTarget",
              "offset": 1,
              "slot": "111",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:171"
            },
            {
              "label": "multiplierBatchFee",
              "offset": 9,
              "slot": "111",
              "type": "t_uint16",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:174"
            },
            {
              "label": "trustedSequencer",
              "offset": 11,
              "slot": "111",
              "type": "t_address",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:177"
            },
            {
              "label": "batchFee",
              "offset": 0,
              "slot": "112",
              "type": "t_uint256",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:180"
            },
            {
              "label": "forcedBatches",
              "offset": 0,
              "slot": "113",
              "type": "t_mapping(t_uint64,t_bytes32)",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:186"
            },
            {
              "label": "sequencedBatches",
              "offset": 0,
              "slot": "114",
              "type": "t_mapping(t_uint64,t_struct(SequencedBatchData)6376_storage)",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:190"
            },
            {
              "label": "lastTimestamp",
              "offset": 0,
              "slot": "115",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:193"
            },
            {
              "label": "lastBatchSequenced",
              "offset": 8,
              "slot": "115",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:196"
            },
            {
              "label": "lastForceBatchSequenced",
              "offset": 16,
              "slot": "115",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:199"
            },
            {
              "label": "lastForceBatch",
              "offset": 24,
              "slot": "115",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:202"
            },
            {
              "label": "lastVerifiedBatch",
              "offset": 0,
              "slot": "116",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:205"
            },
            {
              "label": "trustedAggregator",
              "offset": 8,
              "slot": "116",
              "type": "t_address",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:208"
            },
            {
              "label": "batchNumToStateRoot",
              "offset": 0,
              "slot": "117",
              "type": "t_mapping(t_uint64,t_bytes32)",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:212"
            },
            {
              "label": "trustedSequencerURL",
              "offset": 0,
              "slot": "118",
              "type": "t_string_storage",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:215"
            },
            {
              "label": "networkName",
              "offset": 0,
              "slot": "119",
              "type": "t_string_storage",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:218"
            },
            {
              "label": "pendingStateTransitions",
              "offset": 0,
              "slot": "120",
              "type": "t_mapping(t_uint256,t_struct(PendingState)6386_storage)",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:222"
            },
            {
              "label": "lastPendingState",
              "offset": 0,
              "slot": "121",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:225"
            },
            {
              "label": "lastPendingStateConsolidated",
              "offset": 8,
              "slot": "121",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:228"
            },
            {
              "label": "pendingStateTimeout",
              "offset": 16,
              "slot": "121",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:231"
            },
            {
              "label": "trustedAggregatorTimeout",
              "offset": 24,
              "slot": "121",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:235"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "122",
              "type": "t_address",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:238"
            },
            {
              "label": "pendingAdmin",
              "offset": 0,
              "slot": "123",
              "type": "t_address",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:241"
            },
            {
              "label": "forceBatchTimeout",
              "offset": 20,
              "slot": "123",
              "type": "t_uint64",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:244"
            },
            {
              "label": "isForcedBatchDisallowed",
              "offset": 28,
              "slot": "123",
              "type": "t_bool",
              "contract": "CDKValidium",
              "src": "contracts/CDKValidium.sol:247"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]",
              "numberOfBytes": "320"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(PendingState)6386_storage)": {
              "label": "mapping(uint256 => struct CDKValidium.PendingState)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(SequencedBatchData)6376_storage)": {
              "label": "mapping(uint64 => struct CDKValidium.SequencedBatchData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(PendingState)6386_storage": {
              "label": "struct CDKValidium.PendingState",
              "members": [
                {
                  "label": "timestamp",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastVerifiedBatch",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "exitRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(SequencedBatchData)6376_storage": {
              "label": "struct CDKValidium.SequencedBatchData",
              "members": [
                {
                  "label": "accInputHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "sequencedTimestamp",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "previousLastBatchSequenced",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.20"
      },
      "contracts/mocks/VerifierRollupHelperMock.sol:VerifierRollupHelperMock": {
        "src": "contracts/mocks/VerifierRollupHelperMock.sol:7",
        "version": {
          "withMetadata": "54870d2fb982022e4b30680f39594bcede28511d896a1714cba5508a1ad6d050",
          "withoutMetadata": "c533d40115d3db9884ebfa6a5d9f72823f8ff3456ea20a999a156f94ced43005",
          "linkedWithoutMetadata": "c533d40115d3db9884ebfa6a5d9f72823f8ff3456ea20a999a156f94ced43005"
        },
        "inherit": [
          "contracts/interfaces/IVerifierRollup.sol:IVerifierRollup"
        ],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32[24],uint256[1])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verifiers/FflonkVerifier.sol:FflonkVerifier": {
        "src": "contracts/verifiers/FflonkVerifier.sol:23",
        "version": {
          "withMetadata": "dd6189e3275687a923f1a0503c9d6efeb4735e308fcc18f1c5b3f30f2f016cbe",
          "withoutMetadata": "c793ed1c896698a9f317b547d95452a75b54e65dca527361b6b6accca72008e7",
          "linkedWithoutMetadata": "c793ed1c896698a9f317b547d95452a75b54e65dca527361b6b6accca72008e7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32[24],uint256[1])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "d902e04873bf89bee00690c1ef99a301563daf0b392320e5ccf0449a8ae141a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "contracts/mocks/Uni.sol:SafeMath": {
        "src": "contracts/mocks/Uni.sol:28",
        "version": {
          "withMetadata": "6f6e740ebe6a4197d49e044b08eea68f8588ad606f9a2d64712d1afe6b1a8ad3",
          "withoutMetadata": "2657e65002bd2d965edbc3cec24fcd108bb5612b19b7343629ed8be2e2873e8a",
          "linkedWithoutMetadata": "2657e65002bd2d965edbc3cec24fcd108bb5612b19b7343629ed8be2e2873e8a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.5.16"
      },
      "contracts/mocks/Uni.sol:Uni": {
        "src": "contracts/mocks/Uni.sol:217",
        "version": {
          "withMetadata": "151b654cc661403d6c2894a46de2e57b34b4dd703478ae3f5838d06c94370bee",
          "withoutMetadata": "4c605cfc714b7cad88b401149cd088ecff7d74e2e2469e4537d4224bc7a70337",
          "linkedWithoutMetadata": "4c605cfc714b7cad88b401149cd088ecff7d74e2e2469e4537d4224bc7a70337"
        },
        "inherit": [],
        "libraries": [
          "contracts/mocks/Uni.sol:SafeMath"
        ],
        "methods": [
          "(address,address,uint256)",
          "setMinter(address)",
          "mint(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Uni",
            "src": "contracts/mocks/Uni.sol:315"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalSupply",
            "src": "contracts/mocks/Uni.sol:228"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Uni",
              "src": "contracts/mocks/Uni.sol:228"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Uni",
              "src": "contracts/mocks/Uni.sol:231"
            },
            {
              "label": "mintingAllowedAfter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Uni",
              "src": "contracts/mocks/Uni.sol:234"
            },
            {
              "label": "allowances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint96))",
              "contract": "Uni",
              "src": "contracts/mocks/Uni.sol:243"
            },
            {
              "label": "balances",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint96)",
              "contract": "Uni",
              "src": "contracts/mocks/Uni.sol:246"
            },
            {
              "label": "delegates",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Uni",
              "src": "contracts/mocks/Uni.sol:249"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)293_storage))",
              "contract": "Uni",
              "src": "contracts/mocks/Uni.sol:258"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "Uni",
              "src": "contracts/mocks/Uni.sol:261"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Uni",
              "src": "contracts/mocks/Uni.sol:280"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint96))": {
              "label": "mapping(address => mapping(address => uint96))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)293_storage))": {
              "label": "mapping(address => mapping(uint32 => struct Uni.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint96)": {
              "label": "mapping(address => uint96)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)293_storage)": {
              "label": "mapping(uint32 => struct Uni.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)293_storage": {
              "label": "struct Uni.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint96",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.5.16"
      }
    },
    {
      "contracts/mocks/DAI.sol:Dai": {
        "src": "contracts/mocks/DAI.sol:75",
        "version": {
          "withMetadata": "ba4a61058a1880552526f735958c415f7ab59fe4b87fdb2851bd2547ba0412ca",
          "withoutMetadata": "ba4a61058a1880552526f735958c415f7ab59fe4b87fdb2851bd2547ba0412ca",
          "linkedWithoutMetadata": "ba4a61058a1880552526f735958c415f7ab59fe4b87fdb2851bd2547ba0412ca"
        },
        "inherit": [
          "contracts/mocks/DAI.sol:LibNote"
        ],
        "libraries": [],
        "methods": [
          "rely(address)",
          "deny(address)",
          "(uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "approve(address,uint256)",
          "push(address,uint256)",
          "pull(address,uint256)",
          "move(address,address,uint256)",
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Dai",
            "src": "contracts/mocks/DAI.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Dai",
              "label": "wards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/mocks/DAI.sol:77"
            },
            {
              "contract": "Dai",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/mocks/DAI.sol:97"
            },
            {
              "contract": "Dai",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/mocks/DAI.sol:99"
            },
            {
              "contract": "Dai",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/mocks/DAI.sol:100"
            },
            {
              "contract": "Dai",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/mocks/DAI.sol:101"
            },
            {
              "contract": "Dai",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/mocks/DAI.sol:116"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.5.12"
      },
      "contracts/mocks/DAI.sol:LibNote": {
        "src": "contracts/mocks/DAI.sol:24",
        "version": {
          "withMetadata": "bfe3778fe8622b1cff67d402ad38bcc9dc28b4c33a362b7dbe99a331438d967c",
          "withoutMetadata": "7f2d58cc2fe2c8fb8725c9dc5086beed1e02e5e3c82f5ddf3a4ef452244d19b0",
          "linkedWithoutMetadata": "7f2d58cc2fe2c8fb8725c9dc5086beed1e02e5e3c82f5ddf3a4ef452244d19b0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.5.12"
      }
    }
  ]
}