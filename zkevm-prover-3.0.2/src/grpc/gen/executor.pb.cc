// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: executor.proto

#include "executor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CallTrace_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Contract_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecutionTraceStep_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecutionTraceStep_StorageEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InfoReadWrite_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Log_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessBatchRequest_DbEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProcessTransactionResponse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionContext_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionStep_executor_2eproto;
namespace executor {
namespace v1 {
class ProcessBatchRequest_DbEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchRequest_DbEntry_DoNotUse> _instance;
} _ProcessBatchRequest_DbEntry_DoNotUse_default_instance_;
class ProcessBatchRequest_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse> _instance;
} _ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_default_instance_;
class ProcessBatchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchRequest> _instance;
} _ProcessBatchRequest_default_instance_;
class ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse> _instance;
} _ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_default_instance_;
class ProcessBatchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchResponse> _instance;
} _ProcessBatchResponse_default_instance_;
class GetFlushStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFlushStatusResponse> _instance;
} _GetFlushStatusResponse_default_instance_;
class TraceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceConfig> _instance;
} _TraceConfig_default_instance_;
class InfoReadWriteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InfoReadWrite> _instance;
} _InfoReadWrite_default_instance_;
class CallTraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallTrace> _instance;
} _CallTrace_default_instance_;
class TransactionContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionContext> _instance;
} _TransactionContext_default_instance_;
class TransactionStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionStep> _instance;
} _TransactionStep_default_instance_;
class ContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Contract> _instance;
} _Contract_default_instance_;
class ProcessTransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessTransactionResponse> _instance;
} _ProcessTransactionResponse_default_instance_;
class LogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Log> _instance;
} _Log_default_instance_;
class ExecutionTraceStep_StorageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecutionTraceStep_StorageEntry_DoNotUse> _instance;
} _ExecutionTraceStep_StorageEntry_DoNotUse_default_instance_;
class ExecutionTraceStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecutionTraceStep> _instance;
} _ExecutionTraceStep_default_instance_;
}  // namespace v1
}  // namespace executor
static void InitDefaultsscc_info_CallTrace_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_CallTrace_default_instance_;
    new (ptr) ::executor::v1::CallTrace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::CallTrace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CallTrace_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CallTrace_executor_2eproto}, {
      &scc_info_TransactionContext_executor_2eproto.base,
      &scc_info_TransactionStep_executor_2eproto.base,}};

static void InitDefaultsscc_info_Contract_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_Contract_default_instance_;
    new (ptr) ::executor::v1::Contract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::Contract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Contract_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Contract_executor_2eproto}, {}};

static void InitDefaultsscc_info_ExecutionTraceStep_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ExecutionTraceStep_default_instance_;
    new (ptr) ::executor::v1::ExecutionTraceStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::ExecutionTraceStep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecutionTraceStep_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExecutionTraceStep_executor_2eproto}, {
      &scc_info_ExecutionTraceStep_StorageEntry_DoNotUse_executor_2eproto.base,}};

static void InitDefaultsscc_info_ExecutionTraceStep_StorageEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ExecutionTraceStep_StorageEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::ExecutionTraceStep_StorageEntry_DoNotUse();
  }
  ::executor::v1::ExecutionTraceStep_StorageEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecutionTraceStep_StorageEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExecutionTraceStep_StorageEntry_DoNotUse_executor_2eproto}, {}};

static void InitDefaultsscc_info_GetFlushStatusResponse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_GetFlushStatusResponse_default_instance_;
    new (ptr) ::executor::v1::GetFlushStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::GetFlushStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFlushStatusResponse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetFlushStatusResponse_executor_2eproto}, {}};

static void InitDefaultsscc_info_InfoReadWrite_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_InfoReadWrite_default_instance_;
    new (ptr) ::executor::v1::InfoReadWrite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::InfoReadWrite::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InfoReadWrite_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InfoReadWrite_executor_2eproto}, {}};

static void InitDefaultsscc_info_Log_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_Log_default_instance_;
    new (ptr) ::executor::v1::Log();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::Log::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Log_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Log_executor_2eproto}, {}};

static void InitDefaultsscc_info_ProcessBatchRequest_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchRequest_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::ProcessBatchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProcessBatchRequest_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProcessBatchRequest_executor_2eproto}, {
      &scc_info_ProcessBatchRequest_DbEntry_DoNotUse_executor_2eproto.base,
      &scc_info_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_executor_2eproto.base,
      &scc_info_TraceConfig_executor_2eproto.base,}};

static void InitDefaultsscc_info_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse();
  }
  ::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_executor_2eproto}, {}};

static void InitDefaultsscc_info_ProcessBatchRequest_DbEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchRequest_DbEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse();
  }
  ::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessBatchRequest_DbEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessBatchRequest_DbEntry_DoNotUse_executor_2eproto}, {}};

static void InitDefaultsscc_info_ProcessBatchResponse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchResponse_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::ProcessBatchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProcessBatchResponse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProcessBatchResponse_executor_2eproto}, {
      &scc_info_ProcessTransactionResponse_executor_2eproto.base,
      &scc_info_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_executor_2eproto.base,}};

static void InitDefaultsscc_info_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse();
  }
  ::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_executor_2eproto}, {
      &scc_info_InfoReadWrite_executor_2eproto.base,}};

static void InitDefaultsscc_info_ProcessTransactionResponse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessTransactionResponse_default_instance_;
    new (ptr) ::executor::v1::ProcessTransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::ProcessTransactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProcessTransactionResponse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProcessTransactionResponse_executor_2eproto}, {
      &scc_info_Log_executor_2eproto.base,
      &scc_info_ExecutionTraceStep_executor_2eproto.base,
      &scc_info_CallTrace_executor_2eproto.base,}};

static void InitDefaultsscc_info_TraceConfig_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_TraceConfig_default_instance_;
    new (ptr) ::executor::v1::TraceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::TraceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TraceConfig_executor_2eproto}, {}};

static void InitDefaultsscc_info_TransactionContext_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_TransactionContext_default_instance_;
    new (ptr) ::executor::v1::TransactionContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::TransactionContext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionContext_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactionContext_executor_2eproto}, {}};

static void InitDefaultsscc_info_TransactionStep_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_TransactionStep_default_instance_;
    new (ptr) ::executor::v1::TransactionStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::TransactionStep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionStep_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransactionStep_executor_2eproto}, {
      &scc_info_Contract_executor_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_executor_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_executor_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_executor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_executor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, old_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, old_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, old_batch_num_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, chain_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, fork_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, batch_l2_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, global_exit_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, eth_timestamp_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, coinbase_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, update_merkle_tree_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, no_counters_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, from_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, db_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, contracts_bytecode_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, trace_config_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, context_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, get_keys_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, new_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, new_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, new_local_exit_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, new_batch_num_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cnt_keccak_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cnt_poseidon_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cnt_poseidon_paddings_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cnt_mem_aligns_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cnt_arithmetics_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cnt_binaries_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cnt_steps_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cumulative_gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, responses_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, error_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, read_write_addresses_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, stored_flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, prover_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, nodes_keys_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, program_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, stored_flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, storing_flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, last_flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, pending_to_flush_nodes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, pending_to_flush_program_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, storing_nodes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, storing_program_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, prover_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, disable_storage_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, disable_stack_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, enable_memory_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, enable_return_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, tx_hash_to_generate_execute_trace_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, tx_hash_to_generate_call_trace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWrite, nonce_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWrite, balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::CallTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::CallTrace, context_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::CallTrace, steps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, type_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, from_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, to_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, batch_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, output_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, gas_price_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, execution_time_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, old_state_root_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, depth_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, pc_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, gas_cost_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, gas_refund_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, op_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, stack_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, memory_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, memory_size_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, memory_offset_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, return_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, contract_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, caller_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, tx_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, rlp_tx_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, type_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, return_value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, gas_left_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, gas_refunded_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, error_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, create_address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, logs_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, execution_trace_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, call_trace_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, effective_gas_price_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, effective_percentage_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, has_gasprice_opcode_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, has_balance_opcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, topics_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, batch_number_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, tx_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, tx_index_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, batch_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, index_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep_StorageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep_StorageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep_StorageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep_StorageEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep, pc_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep, op_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep, remaining_gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep, gas_cost_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep, memory_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep, memory_size_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep, memory_offset_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep, stack_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep, return_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep, storage_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep, depth_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep, gas_refund_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ExecutionTraceStep, error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse)},
  { 9, 16, sizeof(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse)},
  { 18, -1, sizeof(::executor::v1::ProcessBatchRequest)},
  { 40, 47, sizeof(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse)},
  { 49, -1, sizeof(::executor::v1::ProcessBatchResponse)},
  { 74, -1, sizeof(::executor::v1::GetFlushStatusResponse)},
  { 87, -1, sizeof(::executor::v1::TraceConfig)},
  { 98, -1, sizeof(::executor::v1::InfoReadWrite)},
  { 105, -1, sizeof(::executor::v1::CallTrace)},
  { 112, -1, sizeof(::executor::v1::TransactionContext)},
  { 129, -1, sizeof(::executor::v1::TransactionStep)},
  { 148, -1, sizeof(::executor::v1::Contract)},
  { 159, -1, sizeof(::executor::v1::ProcessTransactionResponse)},
  { 181, -1, sizeof(::executor::v1::Log)},
  { 194, 201, sizeof(::executor::v1::ExecutionTraceStep_StorageEntry_DoNotUse)},
  { 203, -1, sizeof(::executor::v1::ExecutionTraceStep)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchRequest_DbEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_GetFlushStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_TraceConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_InfoReadWrite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_CallTrace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_TransactionContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_TransactionStep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_Contract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_Log_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ExecutionTraceStep_StorageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ExecutionTraceStep_default_instance_),
};

const char descriptor_table_protodef_executor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016executor.proto\022\013executor.v1\032\033google/pr"
  "otobuf/empty.proto\"\342\004\n\023ProcessBatchReque"
  "st\022\026\n\016old_state_root\030\001 \001(\014\022\032\n\022old_acc_in"
  "put_hash\030\002 \001(\014\022\025\n\rold_batch_num\030\003 \001(\004\022\020\n"
  "\010chain_id\030\004 \001(\004\022\017\n\007fork_id\030\005 \001(\004\022\025\n\rbatc"
  "h_l2_data\030\006 \001(\014\022\030\n\020global_exit_root\030\007 \001("
  "\014\022\025\n\reth_timestamp\030\010 \001(\004\022\020\n\010coinbase\030\t \001"
  "(\t\022\032\n\022update_merkle_tree\030\n \001(\r\022\023\n\013no_cou"
  "nters\030\013 \001(\004\022\014\n\004from\030\014 \001(\t\0224\n\002db\030\r \003(\0132(."
  "executor.v1.ProcessBatchRequest.DbEntry\022"
  "S\n\022contracts_bytecode\030\016 \003(\01327.executor.v"
  "1.ProcessBatchRequest.ContractsBytecodeE"
  "ntry\022.\n\014trace_config\030\017 \001(\0132\030.executor.v1"
  ".TraceConfig\022\022\n\ncontext_id\030\020 \001(\t\022\020\n\010get_"
  "keys\030\021 \001(\r\032)\n\007DbEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t:\0028\001\0328\n\026ContractsBytecodeEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\313\005\n\024Proc"
  "essBatchResponse\022\026\n\016new_state_root\030\001 \001(\014"
  "\022\032\n\022new_acc_input_hash\030\002 \001(\014\022\033\n\023new_loca"
  "l_exit_root\030\003 \001(\014\022\025\n\rnew_batch_num\030\004 \001(\004"
  "\022\031\n\021cnt_keccak_hashes\030\005 \001(\r\022\033\n\023cnt_posei"
  "don_hashes\030\006 \001(\r\022\035\n\025cnt_poseidon_padding"
  "s\030\007 \001(\r\022\026\n\016cnt_mem_aligns\030\010 \001(\r\022\027\n\017cnt_a"
  "rithmetics\030\t \001(\r\022\024\n\014cnt_binaries\030\n \001(\r\022\021"
  "\n\tcnt_steps\030\013 \001(\r\022\033\n\023cumulative_gas_used"
  "\030\014 \001(\004\022:\n\tresponses\030\r \003(\0132\'.executor.v1."
  "ProcessTransactionResponse\022)\n\005error\030\016 \001("
  "\0162\032.executor.v1.ExecutorError\022W\n\024read_wr"
  "ite_addresses\030\017 \003(\01329.executor.v1.Proces"
  "sBatchResponse.ReadWriteAddressesEntry\022\020"
  "\n\010flush_id\030\020 \001(\004\022\027\n\017stored_flush_id\030\021 \001("
  "\004\022\021\n\tprover_id\030\022 \001(\t\022\022\n\nnodes_keys\030\023 \003(\014"
  "\022\024\n\014program_keys\030\024 \003(\014\032U\n\027ReadWriteAddre"
  "ssesEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032."
  "executor.v1.InfoReadWrite:\0028\001\"\347\001\n\026GetFlu"
  "shStatusResponse\022\027\n\017stored_flush_id\030\001 \001("
  "\004\022\030\n\020storing_flush_id\030\002 \001(\004\022\025\n\rlast_flus"
  "h_id\030\003 \001(\004\022\036\n\026pending_to_flush_nodes\030\004 \001"
  "(\004\022 \n\030pending_to_flush_program\030\005 \001(\004\022\025\n\r"
  "storing_nodes\030\006 \001(\004\022\027\n\017storing_program\030\007"
  " \001(\004\022\021\n\tprover_id\030\010 \001(\t\"\303\001\n\013TraceConfig\022"
  "\027\n\017disable_storage\030\001 \001(\r\022\025\n\rdisable_stac"
  "k\030\002 \001(\r\022\025\n\renable_memory\030\003 \001(\r\022\032\n\022enable"
  "_return_data\030\004 \001(\r\022)\n!tx_hash_to_generat"
  "e_execute_trace\030\005 \001(\014\022&\n\036tx_hash_to_gene"
  "rate_call_trace\030\006 \001(\014\"/\n\rInfoReadWrite\022\r"
  "\n\005nonce\030\001 \001(\t\022\017\n\007balance\030\002 \001(\t\"j\n\tCallTr"
  "ace\0220\n\007context\030\001 \001(\0132\037.executor.v1.Trans"
  "actionContext\022+\n\005steps\030\002 \003(\0132\034.executor."
  "v1.TransactionStep\"\332\001\n\022TransactionContex"
  "t\022\014\n\004type\030\001 \001(\t\022\014\n\004from\030\002 \001(\t\022\n\n\002to\030\003 \001("
  "\t\022\014\n\004data\030\004 \001(\014\022\013\n\003gas\030\005 \001(\004\022\r\n\005value\030\006 "
  "\001(\t\022\r\n\005batch\030\007 \001(\014\022\016\n\006output\030\010 \001(\014\022\020\n\010ga"
  "s_used\030\t \001(\004\022\021\n\tgas_price\030\n \001(\t\022\026\n\016execu"
  "tion_time\030\013 \001(\r\022\026\n\016old_state_root\030\014 \001(\014\""
  "\256\002\n\017TransactionStep\022\022\n\nstate_root\030\001 \001(\014\022"
  "\r\n\005depth\030\002 \001(\r\022\n\n\002pc\030\003 \001(\004\022\013\n\003gas\030\004 \001(\004\022"
  "\020\n\010gas_cost\030\005 \001(\004\022\022\n\ngas_refund\030\006 \001(\004\022\n\n"
  "\002op\030\007 \001(\r\022\r\n\005stack\030\010 \003(\t\022\016\n\006memory\030\t \001(\014"
  "\022\023\n\013memory_size\030\n \001(\r\022\025\n\rmemory_offset\030\013"
  " \001(\r\022\023\n\013return_data\030\014 \001(\014\022\'\n\010contract\030\r "
  "\001(\0132\025.executor.v1.Contract\022$\n\005error\030\016 \001("
  "\0162\025.executor.v1.RomError\"c\n\010Contract\022\017\n\007"
  "address\030\001 \001(\t\022\016\n\006caller\030\002 \001(\t\022\r\n\005value\030\003"
  " \001(\t\022\014\n\004data\030\004 \001(\014\022\013\n\003gas\030\005 \001(\004\022\014\n\004type\030"
  "\006 \001(\t\"\347\003\n\032ProcessTransactionResponse\022\017\n\007"
  "tx_hash\030\001 \001(\014\022\016\n\006rlp_tx\030\002 \001(\014\022\014\n\004type\030\003 "
  "\001(\r\022\024\n\014return_value\030\004 \001(\014\022\020\n\010gas_left\030\005 "
  "\001(\004\022\020\n\010gas_used\030\006 \001(\004\022\024\n\014gas_refunded\030\007 "
  "\001(\004\022$\n\005error\030\010 \001(\0162\025.executor.v1.RomErro"
  "r\022\026\n\016create_address\030\t \001(\t\022\022\n\nstate_root\030"
  "\n \001(\014\022\036\n\004logs\030\013 \003(\0132\020.executor.v1.Log\0228\n"
  "\017execution_trace\030\r \003(\0132\037.executor.v1.Exe"
  "cutionTraceStep\022*\n\ncall_trace\030\016 \001(\0132\026.ex"
  "ecutor.v1.CallTrace\022\033\n\023effective_gas_pri"
  "ce\030\017 \001(\t\022\034\n\024effective_percentage\030\020 \001(\r\022\033"
  "\n\023has_gasprice_opcode\030\021 \001(\r\022\032\n\022has_balan"
  "ce_opcode\030\022 \001(\r\"\220\001\n\003Log\022\017\n\007address\030\001 \001(\t"
  "\022\016\n\006topics\030\002 \003(\014\022\014\n\004data\030\003 \001(\014\022\024\n\014batch_"
  "number\030\004 \001(\004\022\017\n\007tx_hash\030\005 \001(\014\022\020\n\010tx_inde"
  "x\030\006 \001(\r\022\022\n\nbatch_hash\030\007 \001(\014\022\r\n\005index\030\010 \001"
  "(\r\"\355\002\n\022ExecutionTraceStep\022\n\n\002pc\030\001 \001(\004\022\n\n"
  "\002op\030\002 \001(\t\022\025\n\rremaining_gas\030\003 \001(\004\022\020\n\010gas_"
  "cost\030\004 \001(\004\022\016\n\006memory\030\005 \001(\014\022\023\n\013memory_siz"
  "e\030\006 \001(\r\022\025\n\rmemory_offset\030\007 \001(\r\022\r\n\005stack\030"
  "\010 \003(\t\022\023\n\013return_data\030\t \001(\014\022=\n\007storage\030\n "
  "\003(\0132,.executor.v1.ExecutionTraceStep.Sto"
  "rageEntry\022\r\n\005depth\030\013 \001(\r\022\022\n\ngas_refund\030\014"
  " \001(\004\022$\n\005error\030\r \001(\0162\025.executor.v1.RomErr"
  "or\032.\n\014StorageEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001*\306\010\n\010RomError\022\031\n\025ROM_ERROR_UNS"
  "PECIFIED\020\000\022\026\n\022ROM_ERROR_NO_ERROR\020\001\022\030\n\024RO"
  "M_ERROR_OUT_OF_GAS\020\002\022\034\n\030ROM_ERROR_STACK_"
  "OVERFLOW\020\003\022\035\n\031ROM_ERROR_STACK_UNDERFLOW\020"
  "\004\022$\n ROM_ERROR_MAX_CODE_SIZE_EXCEEDED\020\005\022"
  "(\n$ROM_ERROR_CONTRACT_ADDRESS_COLLISION\020"
  "\006\022 \n\034ROM_ERROR_EXECUTION_REVERTED\020\007\022\"\n\036R"
  "OM_ERROR_OUT_OF_COUNTERS_STEP\020\010\022$\n ROM_E"
  "RROR_OUT_OF_COUNTERS_KECCAK\020\t\022$\n ROM_ERR"
  "OR_OUT_OF_COUNTERS_BINARY\020\n\022!\n\035ROM_ERROR"
  "_OUT_OF_COUNTERS_MEM\020\013\022#\n\037ROM_ERROR_OUT_"
  "OF_COUNTERS_ARITH\020\014\022%\n!ROM_ERROR_OUT_OF_"
  "COUNTERS_PADDING\020\r\022&\n\"ROM_ERROR_OUT_OF_C"
  "OUNTERS_POSEIDON\020\016\022\032\n\026ROM_ERROR_INVALID_"
  "JUMP\020\017\022\034\n\030ROM_ERROR_INVALID_OPCODE\020\020\022\034\n\030"
  "ROM_ERROR_INVALID_STATIC\020\021\022(\n$ROM_ERROR_"
  "INVALID_BYTECODE_STARTS_EF\020\022\022)\n%ROM_ERRO"
  "R_INTRINSIC_INVALID_SIGNATURE\020\023\022(\n$ROM_E"
  "RROR_INTRINSIC_INVALID_CHAIN_ID\020\024\022%\n!ROM"
  "_ERROR_INTRINSIC_INVALID_NONCE\020\025\022)\n%ROM_"
  "ERROR_INTRINSIC_INVALID_GAS_LIMIT\020\026\022\'\n#R"
  "OM_ERROR_INTRINSIC_INVALID_BALANCE\020\027\022/\n+"
  "ROM_ERROR_INTRINSIC_INVALID_BATCH_GAS_LI"
  "MIT\020\030\022+\n\'ROM_ERROR_INTRINSIC_INVALID_SEN"
  "DER_CODE\020\031\022\'\n#ROM_ERROR_INTRINSIC_TX_GAS"
  "_OVERFLOW\020\032\022 \n\034ROM_ERROR_BATCH_DATA_TOO_"
  "BIG\020\033\022!\n\035ROM_ERROR_UNSUPPORTED_FORK_ID\020\034"
  "\022\031\n\025ROM_ERROR_INVALID_RLP\020\035*\222\036\n\rExecutor"
  "Error\022\036\n\032EXECUTOR_ERROR_UNSPECIFIED\020\000\022\033\n"
  "\027EXECUTOR_ERROR_NO_ERROR\020\001\022\033\n\027EXECUTOR_E"
  "RROR_DB_ERROR\020\002\0222\n.EXECUTOR_ERROR_SM_MAI"
  "N_COUNTERS_OVERFLOW_STEPS\020\003\0223\n/EXECUTOR_"
  "ERROR_SM_MAIN_COUNTERS_OVERFLOW_KECCAK\020\004"
  "\0223\n/EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVER"
  "FLOW_BINARY\020\005\0220\n,EXECUTOR_ERROR_SM_MAIN_"
  "COUNTERS_OVERFLOW_MEM\020\006\0222\n.EXECUTOR_ERRO"
  "R_SM_MAIN_COUNTERS_OVERFLOW_ARITH\020\007\0224\n0E"
  "XECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_"
  "PADDING\020\010\0225\n1EXECUTOR_ERROR_SM_MAIN_COUN"
  "TERS_OVERFLOW_POSEIDON\020\t\022&\n\"EXECUTOR_ERR"
  "OR_UNSUPPORTED_FORK_ID\020\n\022#\n\037EXECUTOR_ERR"
  "OR_BALANCE_MISMATCH\020\013\022\035\n\031EXECUTOR_ERROR_"
  "FEA2SCALAR\020\014\022\030\n\024EXECUTOR_ERROR_TOS32\020\r\022."
  "\n*EXECUTOR_ERROR_SM_MAIN_INVALID_UNSIGNE"
  "D_TX\020\016\022.\n*EXECUTOR_ERROR_SM_MAIN_INVALID"
  "_NO_COUNTERS\020\017\0229\n5EXECUTOR_ERROR_SM_MAIN"
  "_ARITH_ECRECOVER_DIVIDE_BY_ZERO\020\020\022/\n+EXE"
  "CUTOR_ERROR_SM_MAIN_ADDRESS_OUT_OF_RANGE"
  "\020\021\022+\n\'EXECUTOR_ERROR_SM_MAIN_ADDRESS_NEG"
  "ATIVE\020\022\022.\n*EXECUTOR_ERROR_SM_MAIN_STORAG"
  "E_INVALID_KEY\020\023\022 \n\034EXECUTOR_ERROR_SM_MAI"
  "N_HASHK\020\024\0222\n.EXECUTOR_ERROR_SM_MAIN_HASH"
  "K_SIZE_OUT_OF_RANGE\020\025\0222\n.EXECUTOR_ERROR_"
  "SM_MAIN_HASHK_POSITION_NEGATIVE\020\026\022@\n<EXE"
  "CUTOR_ERROR_SM_MAIN_HASHK_POSITION_PLUS_"
  "SIZE_OUT_OF_RANGE\020\027\0228\n4EXECUTOR_ERROR_SM"
  "_MAIN_HASHKDIGEST_ADDRESS_NOT_FOUND\020\030\0224\n"
  "0EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_"
  "COMPLETED\020\031\022 \n\034EXECUTOR_ERROR_SM_MAIN_HA"
  "SHP\020\032\0222\n.EXECUTOR_ERROR_SM_MAIN_HASHP_SI"
  "ZE_OUT_OF_RANGE\020\033\0222\n.EXECUTOR_ERROR_SM_M"
  "AIN_HASHP_POSITION_NEGATIVE\020\034\022@\n<EXECUTO"
  "R_ERROR_SM_MAIN_HASHP_POSITION_PLUS_SIZE"
  "_OUT_OF_RANGE\020\035\0228\n4EXECUTOR_ERROR_SM_MAI"
  "N_HASHPDIGEST_ADDRESS_NOT_FOUND\020\036\0224\n0EXE"
  "CUTOR_ERROR_SM_MAIN_HASHPDIGEST_NOT_COMP"
  "LETED\020\037\0227\n3EXECUTOR_ERROR_SM_MAIN_MEMALI"
  "GN_OFFSET_OUT_OF_RANGE\020 \022*\n&EXECUTOR_ERR"
  "OR_SM_MAIN_MULTIPLE_FREEIN\020!\022!\n\035EXECUTOR"
  "_ERROR_SM_MAIN_ASSERT\020\"\022!\n\035EXECUTOR_ERRO"
  "R_SM_MAIN_MEMORY\020#\0220\n,EXECUTOR_ERROR_SM_"
  "MAIN_STORAGE_READ_MISMATCH\020$\0221\n-EXECUTOR"
  "_ERROR_SM_MAIN_STORAGE_WRITE_MISMATCH\020%\022"
  "/\n+EXECUTOR_ERROR_SM_MAIN_HASHK_VALUE_MI"
  "SMATCH\020&\0221\n-EXECUTOR_ERROR_SM_MAIN_HASHK"
  "_PADDING_MISMATCH\020\'\022.\n*EXECUTOR_ERROR_SM"
  "_MAIN_HASHK_SIZE_MISMATCH\020(\0223\n/EXECUTOR_"
  "ERROR_SM_MAIN_HASHKLEN_LENGTH_MISMATCH\020)"
  "\0220\n,EXECUTOR_ERROR_SM_MAIN_HASHKLEN_CALL"
  "ED_TWICE\020*\0220\n,EXECUTOR_ERROR_SM_MAIN_HAS"
  "HKDIGEST_NOT_FOUND\020+\0226\n2EXECUTOR_ERROR_S"
  "M_MAIN_HASHKDIGEST_DIGEST_MISMATCH\020,\0223\n/"
  "EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_CALLE"
  "D_TWICE\020-\022/\n+EXECUTOR_ERROR_SM_MAIN_HASH"
  "P_VALUE_MISMATCH\020.\0221\n-EXECUTOR_ERROR_SM_"
  "MAIN_HASHP_PADDING_MISMATCH\020/\022.\n*EXECUTO"
  "R_ERROR_SM_MAIN_HASHP_SIZE_MISMATCH\0200\0223\n"
  "/EXECUTOR_ERROR_SM_MAIN_HASHPLEN_LENGTH_"
  "MISMATCH\0201\0220\n,EXECUTOR_ERROR_SM_MAIN_HAS"
  "HPLEN_CALLED_TWICE\0202\0226\n2EXECUTOR_ERROR_S"
  "M_MAIN_HASHPDIGEST_DIGEST_MISMATCH\0203\0223\n/"
  "EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_CALLE"
  "D_TWICE\0204\022)\n%EXECUTOR_ERROR_SM_MAIN_ARIT"
  "H_MISMATCH\0205\0223\n/EXECUTOR_ERROR_SM_MAIN_A"
  "RITH_ECRECOVER_MISMATCH\0206\022.\n*EXECUTOR_ER"
  "ROR_SM_MAIN_BINARY_ADD_MISMATCH\0207\022.\n*EXE"
  "CUTOR_ERROR_SM_MAIN_BINARY_SUB_MISMATCH\020"
  "8\022-\n)EXECUTOR_ERROR_SM_MAIN_BINARY_LT_MI"
  "SMATCH\0209\022.\n*EXECUTOR_ERROR_SM_MAIN_BINAR"
  "Y_SLT_MISMATCH\020:\022-\n)EXECUTOR_ERROR_SM_MA"
  "IN_BINARY_EQ_MISMATCH\020;\022.\n*EXECUTOR_ERRO"
  "R_SM_MAIN_BINARY_AND_MISMATCH\020<\022-\n)EXECU"
  "TOR_ERROR_SM_MAIN_BINARY_OR_MISMATCH\020=\022."
  "\n*EXECUTOR_ERROR_SM_MAIN_BINARY_XOR_MISM"
  "ATCH\020>\0222\n.EXECUTOR_ERROR_SM_MAIN_MEMALIG"
  "N_WRITE_MISMATCH\020\?\0223\n/EXECUTOR_ERROR_SM_"
  "MAIN_MEMALIGN_WRITE8_MISMATCH\020@\0221\n-EXECU"
  "TOR_ERROR_SM_MAIN_MEMALIGN_READ_MISMATCH"
  "\020A\022,\n(EXECUTOR_ERROR_SM_MAIN_JMPN_OUT_OF"
  "_RANGE\020B\0222\n.EXECUTOR_ERROR_SM_MAIN_HASHK"
  "_READ_OUT_OF_RANGE\020C\0222\n.EXECUTOR_ERROR_S"
  "M_MAIN_HASHP_READ_OUT_OF_RANGE\020D\022)\n%EXEC"
  "UTOR_ERROR_INVALID_OLD_STATE_ROOT\020E\022-\n)E"
  "XECUTOR_ERROR_INVALID_OLD_ACC_INPUT_HASH"
  "\020F\022#\n\037EXECUTOR_ERROR_INVALID_CHAIN_ID\020G\022"
  "(\n$EXECUTOR_ERROR_INVALID_BATCH_L2_DATA\020"
  "H\022+\n\'EXECUTOR_ERROR_INVALID_GLOBAL_EXIT_"
  "ROOT\020I\022#\n\037EXECUTOR_ERROR_INVALID_COINBAS"
  "E\020J\022\037\n\033EXECUTOR_ERROR_INVALID_FROM\020K\022!\n\035"
  "EXECUTOR_ERROR_INVALID_DB_KEY\020L\022#\n\037EXECU"
  "TOR_ERROR_INVALID_DB_VALUE\020M\0221\n-EXECUTOR"
  "_ERROR_INVALID_CONTRACTS_BYTECODE_KEY\020N\022"
  "3\n/EXECUTOR_ERROR_INVALID_CONTRACTS_BYTE"
  "CODE_VALUE\020O\022\"\n\036EXECUTOR_ERROR_INVALID_G"
  "ET_KEY\020P2\271\001\n\017ExecutorService\022U\n\014ProcessB"
  "atch\022 .executor.v1.ProcessBatchRequest\032!"
  ".executor.v1.ProcessBatchResponse\"\000\022O\n\016G"
  "etFlushStatus\022\026.google.protobuf.Empty\032#."
  "executor.v1.GetFlushStatusResponse\"\000B>Z<"
  "github.com/0xPolygonHermez/zkevm-node/st"
  "ate/runtime/executorb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_executor_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_executor_2eproto_sccs[16] = {
  &scc_info_CallTrace_executor_2eproto.base,
  &scc_info_Contract_executor_2eproto.base,
  &scc_info_ExecutionTraceStep_executor_2eproto.base,
  &scc_info_ExecutionTraceStep_StorageEntry_DoNotUse_executor_2eproto.base,
  &scc_info_GetFlushStatusResponse_executor_2eproto.base,
  &scc_info_InfoReadWrite_executor_2eproto.base,
  &scc_info_Log_executor_2eproto.base,
  &scc_info_ProcessBatchRequest_executor_2eproto.base,
  &scc_info_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_executor_2eproto.base,
  &scc_info_ProcessBatchRequest_DbEntry_DoNotUse_executor_2eproto.base,
  &scc_info_ProcessBatchResponse_executor_2eproto.base,
  &scc_info_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_executor_2eproto.base,
  &scc_info_ProcessTransactionResponse_executor_2eproto.base,
  &scc_info_TraceConfig_executor_2eproto.base,
  &scc_info_TransactionContext_executor_2eproto.base,
  &scc_info_TransactionStep_executor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_executor_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_executor_2eproto = {
  false, false, descriptor_table_protodef_executor_2eproto, "executor.proto", 8828,
  &descriptor_table_executor_2eproto_once, descriptor_table_executor_2eproto_sccs, descriptor_table_executor_2eproto_deps, 16, 1,
  schemas, file_default_instances, TableStruct_executor_2eproto::offsets,
  file_level_metadata_executor_2eproto, 16, file_level_enum_descriptors_executor_2eproto, file_level_service_descriptors_executor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_executor_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_executor_2eproto)), true);
namespace executor {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RomError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_executor_2eproto);
  return file_level_enum_descriptors_executor_2eproto[0];
}
bool RomError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecutorError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_executor_2eproto);
  return file_level_enum_descriptors_executor_2eproto[1];
}
bool ExecutorError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
      return true;
    default:
      return false;
  }
}


// ===================================================================

ProcessBatchRequest_DbEntry_DoNotUse::ProcessBatchRequest_DbEntry_DoNotUse() {}
ProcessBatchRequest_DbEntry_DoNotUse::ProcessBatchRequest_DbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequest_DbEntry_DoNotUse::MergeFrom(const ProcessBatchRequest_DbEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequest_DbEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProcessBatchRequest_DbEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse() {}
ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::MergeFrom(const ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ProcessBatchRequest::InitAsDefaultInstance() {
  ::executor::v1::_ProcessBatchRequest_default_instance_._instance.get_mutable()->trace_config_ = const_cast< ::executor::v1::TraceConfig*>(
      ::executor::v1::TraceConfig::internal_default_instance());
}
class ProcessBatchRequest::_Internal {
 public:
  static const ::executor::v1::TraceConfig& trace_config(const ProcessBatchRequest* msg);
};

const ::executor::v1::TraceConfig&
ProcessBatchRequest::_Internal::trace_config(const ProcessBatchRequest* msg) {
  return *msg->trace_config_;
}
ProcessBatchRequest::ProcessBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  db_(arena),
  contracts_bytecode_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessBatchRequest)
}
ProcessBatchRequest::ProcessBatchRequest(const ProcessBatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_.MergeFrom(from.db_);
  contracts_bytecode_.MergeFrom(from.contracts_bytecode_);
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_state_root().empty()) {
    old_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_state_root(),
      GetArena());
  }
  old_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_acc_input_hash().empty()) {
    old_acc_input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_acc_input_hash(),
      GetArena());
  }
  batch_l2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_l2_data().empty()) {
    batch_l2_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_batch_l2_data(),
      GetArena());
  }
  global_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_global_exit_root().empty()) {
    global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_global_exit_root(),
      GetArena());
  }
  coinbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_coinbase().empty()) {
    coinbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coinbase(),
      GetArena());
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from(),
      GetArena());
  }
  context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_context_id().empty()) {
    context_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_context_id(),
      GetArena());
  }
  if (from._internal_has_trace_config()) {
    trace_config_ = new ::executor::v1::TraceConfig(*from.trace_config_);
  } else {
    trace_config_ = nullptr;
  }
  ::memcpy(&old_batch_num_, &from.old_batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_keys_) -
    reinterpret_cast<char*>(&old_batch_num_)) + sizeof(get_keys_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessBatchRequest)
}

void ProcessBatchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessBatchRequest_executor_2eproto.base);
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_l2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  global_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coinbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trace_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_keys_) -
      reinterpret_cast<char*>(&trace_config_)) + sizeof(get_keys_));
}

ProcessBatchRequest::~ProcessBatchRequest() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessBatchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessBatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  old_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_acc_input_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_l2_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  global_exit_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coinbase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trace_config_;
}

void ProcessBatchRequest::ArenaDtor(void* object) {
  ProcessBatchRequest* _this = reinterpret_cast< ProcessBatchRequest* >(object);
  (void)_this;
}
void ProcessBatchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessBatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessBatchRequest& ProcessBatchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessBatchRequest_executor_2eproto.base);
  return *internal_default_instance();
}


void ProcessBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessBatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_.Clear();
  contracts_bytecode_.Clear();
  old_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_acc_input_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_l2_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  global_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coinbase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  context_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && trace_config_ != nullptr) {
    delete trace_config_;
  }
  trace_config_ = nullptr;
  ::memset(&old_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_keys_) -
      reinterpret_cast<char*>(&old_batch_num_)) + sizeof(get_keys_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessBatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes old_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_old_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes old_acc_input_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_old_acc_input_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 old_batch_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          old_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chain_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fork_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes batch_l2_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_batch_l2_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes global_exit_root = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_global_exit_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 eth_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          eth_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coinbase = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_coinbase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessBatchRequest.coinbase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 update_merkle_tree = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          update_merkle_tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 no_counters = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          no_counters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessBatchRequest.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> db = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&db_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> contracts_bytecode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&contracts_bytecode_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // .executor.v1.TraceConfig trace_config = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string context_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_context_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessBatchRequest.context_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 get_keys = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          get_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessBatchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessBatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes old_state_root = 1;
  if (this->old_state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_old_state_root(), target);
  }

  // bytes old_acc_input_hash = 2;
  if (this->old_acc_input_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_old_acc_input_hash(), target);
  }

  // uint64 old_batch_num = 3;
  if (this->old_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_old_batch_num(), target);
  }

  // uint64 chain_id = 4;
  if (this->chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_chain_id(), target);
  }

  // uint64 fork_id = 5;
  if (this->fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fork_id(), target);
  }

  // bytes batch_l2_data = 6;
  if (this->batch_l2_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_batch_l2_data(), target);
  }

  // bytes global_exit_root = 7;
  if (this->global_exit_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_global_exit_root(), target);
  }

  // uint64 eth_timestamp = 8;
  if (this->eth_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_eth_timestamp(), target);
  }

  // string coinbase = 9;
  if (this->coinbase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coinbase().data(), static_cast<int>(this->_internal_coinbase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequest.coinbase");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_coinbase(), target);
  }

  // uint32 update_merkle_tree = 10;
  if (this->update_merkle_tree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_update_merkle_tree(), target);
  }

  // uint64 no_counters = 11;
  if (this->no_counters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_no_counters(), target);
  }

  // string from = 12;
  if (this->from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequest.from");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_from(), target);
  }

  // map<string, string> db = 13;
  if (!this->_internal_db().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchRequest.DbEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchRequest.DbEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_db().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_db().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_db().begin();
          it != this->_internal_db().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessBatchRequest_DbEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_db().begin();
          it != this->_internal_db().end(); ++it) {
        target = ProcessBatchRequest_DbEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> contracts_bytecode = 14;
  if (!this->_internal_contracts_bytecode().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchRequest.ContractsBytecodeEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchRequest.ContractsBytecodeEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_contracts_bytecode().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_contracts_bytecode().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_contracts_bytecode().begin();
          it != this->_internal_contracts_bytecode().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::Funcs::InternalSerialize(14, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_contracts_bytecode().begin();
          it != this->_internal_contracts_bytecode().end(); ++it) {
        target = ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::Funcs::InternalSerialize(14, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .executor.v1.TraceConfig trace_config = 15;
  if (this->has_trace_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::trace_config(this), target, stream);
  }

  // string context_id = 16;
  if (this->context_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context_id().data(), static_cast<int>(this->_internal_context_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequest.context_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_context_id(), target);
  }

  // uint32 get_keys = 17;
  if (this->get_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_get_keys(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessBatchRequest)
  return target;
}

size_t ProcessBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessBatchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> db = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_db_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_db().begin();
      it != this->_internal_db().end(); ++it) {
    total_size += ProcessBatchRequest_DbEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> contracts_bytecode = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_contracts_bytecode_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_contracts_bytecode().begin();
      it != this->_internal_contracts_bytecode().end(); ++it) {
    total_size += ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes old_state_root = 1;
  if (this->old_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_state_root());
  }

  // bytes old_acc_input_hash = 2;
  if (this->old_acc_input_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_acc_input_hash());
  }

  // bytes batch_l2_data = 6;
  if (this->batch_l2_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_batch_l2_data());
  }

  // bytes global_exit_root = 7;
  if (this->global_exit_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_global_exit_root());
  }

  // string coinbase = 9;
  if (this->coinbase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coinbase());
  }

  // string from = 12;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string context_id = 16;
  if (this->context_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context_id());
  }

  // .executor.v1.TraceConfig trace_config = 15;
  if (this->has_trace_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trace_config_);
  }

  // uint64 old_batch_num = 3;
  if (this->old_batch_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_old_batch_num());
  }

  // uint64 chain_id = 4;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chain_id());
  }

  // uint64 fork_id = 5;
  if (this->fork_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fork_id());
  }

  // uint64 eth_timestamp = 8;
  if (this->eth_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_eth_timestamp());
  }

  // uint64 no_counters = 11;
  if (this->no_counters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_no_counters());
  }

  // uint32 update_merkle_tree = 10;
  if (this->update_merkle_tree() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_update_merkle_tree());
  }

  // uint32 get_keys = 17;
  if (this->get_keys() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_get_keys());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessBatchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.ProcessBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessBatchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessBatchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.ProcessBatchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.ProcessBatchRequest)
    MergeFrom(*source);
  }
}

void ProcessBatchRequest::MergeFrom(const ProcessBatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  db_.MergeFrom(from.db_);
  contracts_bytecode_.MergeFrom(from.contracts_bytecode_);
  if (from.old_state_root().size() > 0) {
    _internal_set_old_state_root(from._internal_old_state_root());
  }
  if (from.old_acc_input_hash().size() > 0) {
    _internal_set_old_acc_input_hash(from._internal_old_acc_input_hash());
  }
  if (from.batch_l2_data().size() > 0) {
    _internal_set_batch_l2_data(from._internal_batch_l2_data());
  }
  if (from.global_exit_root().size() > 0) {
    _internal_set_global_exit_root(from._internal_global_exit_root());
  }
  if (from.coinbase().size() > 0) {
    _internal_set_coinbase(from._internal_coinbase());
  }
  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.context_id().size() > 0) {
    _internal_set_context_id(from._internal_context_id());
  }
  if (from.has_trace_config()) {
    _internal_mutable_trace_config()->::executor::v1::TraceConfig::MergeFrom(from._internal_trace_config());
  }
  if (from.old_batch_num() != 0) {
    _internal_set_old_batch_num(from._internal_old_batch_num());
  }
  if (from.chain_id() != 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.fork_id() != 0) {
    _internal_set_fork_id(from._internal_fork_id());
  }
  if (from.eth_timestamp() != 0) {
    _internal_set_eth_timestamp(from._internal_eth_timestamp());
  }
  if (from.no_counters() != 0) {
    _internal_set_no_counters(from._internal_no_counters());
  }
  if (from.update_merkle_tree() != 0) {
    _internal_set_update_merkle_tree(from._internal_update_merkle_tree());
  }
  if (from.get_keys() != 0) {
    _internal_set_get_keys(from._internal_get_keys());
  }
}

void ProcessBatchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.ProcessBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessBatchRequest::CopyFrom(const ProcessBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBatchRequest::IsInitialized() const {
  return true;
}

void ProcessBatchRequest::InternalSwap(ProcessBatchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_.Swap(&other->db_);
  contracts_bytecode_.Swap(&other->contracts_bytecode_);
  old_state_root_.Swap(&other->old_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_acc_input_hash_.Swap(&other->old_acc_input_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_l2_data_.Swap(&other->batch_l2_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  global_exit_root_.Swap(&other->global_exit_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coinbase_.Swap(&other->coinbase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  context_id_.Swap(&other->context_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessBatchRequest, get_keys_)
      + sizeof(ProcessBatchRequest::get_keys_)
      - PROTOBUF_FIELD_OFFSET(ProcessBatchRequest, trace_config_)>(
          reinterpret_cast<char*>(&trace_config_),
          reinterpret_cast<char*>(&other->trace_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse() {}
ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::MergeFrom(const ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ProcessBatchResponse::InitAsDefaultInstance() {
}
class ProcessBatchResponse::_Internal {
 public:
};

ProcessBatchResponse::ProcessBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena),
  read_write_addresses_(arena),
  nodes_keys_(arena),
  program_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessBatchResponse)
}
ProcessBatchResponse::ProcessBatchResponse(const ProcessBatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_),
      nodes_keys_(from.nodes_keys_),
      program_keys_(from.program_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  read_write_addresses_.MergeFrom(from.read_write_addresses_);
  new_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_state_root().empty()) {
    new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_state_root(),
      GetArena());
  }
  new_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_acc_input_hash().empty()) {
    new_acc_input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_acc_input_hash(),
      GetArena());
  }
  new_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_local_exit_root().empty()) {
    new_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_local_exit_root(),
      GetArena());
  }
  prover_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prover_id().empty()) {
    prover_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prover_id(),
      GetArena());
  }
  ::memcpy(&new_batch_num_, &from.new_batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&stored_flush_id_) -
    reinterpret_cast<char*>(&new_batch_num_)) + sizeof(stored_flush_id_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessBatchResponse)
}

void ProcessBatchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessBatchResponse_executor_2eproto.base);
  new_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prover_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&new_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stored_flush_id_) -
      reinterpret_cast<char*>(&new_batch_num_)) + sizeof(stored_flush_id_));
}

ProcessBatchResponse::~ProcessBatchResponse() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessBatchResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessBatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  new_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_acc_input_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_local_exit_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prover_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessBatchResponse::ArenaDtor(void* object) {
  ProcessBatchResponse* _this = reinterpret_cast< ProcessBatchResponse* >(object);
  (void)_this;
}
void ProcessBatchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessBatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessBatchResponse& ProcessBatchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessBatchResponse_executor_2eproto.base);
  return *internal_default_instance();
}


void ProcessBatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessBatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  read_write_addresses_.Clear();
  nodes_keys_.Clear();
  program_keys_.Clear();
  new_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_acc_input_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_local_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prover_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&new_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stored_flush_id_) -
      reinterpret_cast<char*>(&new_batch_num_)) + sizeof(stored_flush_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessBatchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes new_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_new_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes new_acc_input_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_acc_input_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes new_local_exit_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_new_local_exit_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 new_batch_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          new_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_keccak_hashes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cnt_keccak_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_poseidon_hashes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cnt_poseidon_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_poseidon_paddings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cnt_poseidon_paddings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_mem_aligns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cnt_mem_aligns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_arithmetics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          cnt_arithmetics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_binaries = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cnt_binaries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_steps = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          cnt_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cumulative_gas_used = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          cumulative_gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .executor.v1.ProcessTransactionResponse responses = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // .executor.v1.ExecutorError error = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::ExecutorError>(val));
        } else goto handle_unusual;
        continue;
      // map<string, .executor.v1.InfoReadWrite> read_write_addresses = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&read_write_addresses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 flush_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 stored_flush_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          stored_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prover_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_prover_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessBatchResponse.prover_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes nodes_keys = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_nodes_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes program_keys = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_program_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessBatchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessBatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes new_state_root = 1;
  if (this->new_state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_new_state_root(), target);
  }

  // bytes new_acc_input_hash = 2;
  if (this->new_acc_input_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_new_acc_input_hash(), target);
  }

  // bytes new_local_exit_root = 3;
  if (this->new_local_exit_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_new_local_exit_root(), target);
  }

  // uint64 new_batch_num = 4;
  if (this->new_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_new_batch_num(), target);
  }

  // uint32 cnt_keccak_hashes = 5;
  if (this->cnt_keccak_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cnt_keccak_hashes(), target);
  }

  // uint32 cnt_poseidon_hashes = 6;
  if (this->cnt_poseidon_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cnt_poseidon_hashes(), target);
  }

  // uint32 cnt_poseidon_paddings = 7;
  if (this->cnt_poseidon_paddings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cnt_poseidon_paddings(), target);
  }

  // uint32 cnt_mem_aligns = 8;
  if (this->cnt_mem_aligns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_cnt_mem_aligns(), target);
  }

  // uint32 cnt_arithmetics = 9;
  if (this->cnt_arithmetics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cnt_arithmetics(), target);
  }

  // uint32 cnt_binaries = 10;
  if (this->cnt_binaries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cnt_binaries(), target);
  }

  // uint32 cnt_steps = 11;
  if (this->cnt_steps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cnt_steps(), target);
  }

  // uint64 cumulative_gas_used = 12;
  if (this->cumulative_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_cumulative_gas_used(), target);
  }

  // repeated .executor.v1.ProcessTransactionResponse responses = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_responses(i), target, stream);
  }

  // .executor.v1.ExecutorError error = 14;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_error(), target);
  }

  // map<string, .executor.v1.InfoReadWrite> read_write_addresses = 15;
  if (!this->_internal_read_write_addresses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWrite >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchResponse.ReadWriteAddressesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_read_write_addresses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_read_write_addresses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWrite >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWrite >::const_iterator
          it = this->_internal_read_write_addresses().begin();
          it != this->_internal_read_write_addresses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::Funcs::InternalSerialize(15, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWrite >::const_iterator
          it = this->_internal_read_write_addresses().begin();
          it != this->_internal_read_write_addresses().end(); ++it) {
        target = ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::Funcs::InternalSerialize(15, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // uint64 flush_id = 16;
  if (this->flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_flush_id(), target);
  }

  // uint64 stored_flush_id = 17;
  if (this->stored_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_stored_flush_id(), target);
  }

  // string prover_id = 18;
  if (this->prover_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prover_id().data(), static_cast<int>(this->_internal_prover_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchResponse.prover_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_prover_id(), target);
  }

  // repeated bytes nodes_keys = 19;
  for (int i = 0, n = this->_internal_nodes_keys_size(); i < n; i++) {
    const auto& s = this->_internal_nodes_keys(i);
    target = stream->WriteBytes(19, s, target);
  }

  // repeated bytes program_keys = 20;
  for (int i = 0, n = this->_internal_program_keys_size(); i < n; i++) {
    const auto& s = this->_internal_program_keys(i);
    target = stream->WriteBytes(20, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessBatchResponse)
  return target;
}

size_t ProcessBatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessBatchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.ProcessTransactionResponse responses = 13;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .executor.v1.InfoReadWrite> read_write_addresses = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_read_write_addresses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWrite >::const_iterator
      it = this->_internal_read_write_addresses().begin();
      it != this->_internal_read_write_addresses().end(); ++it) {
    total_size += ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated bytes nodes_keys = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(nodes_keys_.size());
  for (int i = 0, n = nodes_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      nodes_keys_.Get(i));
  }

  // repeated bytes program_keys = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(program_keys_.size());
  for (int i = 0, n = program_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      program_keys_.Get(i));
  }

  // bytes new_state_root = 1;
  if (this->new_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_state_root());
  }

  // bytes new_acc_input_hash = 2;
  if (this->new_acc_input_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_acc_input_hash());
  }

  // bytes new_local_exit_root = 3;
  if (this->new_local_exit_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_local_exit_root());
  }

  // string prover_id = 18;
  if (this->prover_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prover_id());
  }

  // uint64 new_batch_num = 4;
  if (this->new_batch_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_new_batch_num());
  }

  // uint32 cnt_keccak_hashes = 5;
  if (this->cnt_keccak_hashes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_keccak_hashes());
  }

  // uint32 cnt_poseidon_hashes = 6;
  if (this->cnt_poseidon_hashes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_poseidon_hashes());
  }

  // uint32 cnt_poseidon_paddings = 7;
  if (this->cnt_poseidon_paddings() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_poseidon_paddings());
  }

  // uint32 cnt_mem_aligns = 8;
  if (this->cnt_mem_aligns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_mem_aligns());
  }

  // uint32 cnt_arithmetics = 9;
  if (this->cnt_arithmetics() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_arithmetics());
  }

  // uint32 cnt_binaries = 10;
  if (this->cnt_binaries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_binaries());
  }

  // uint64 cumulative_gas_used = 12;
  if (this->cumulative_gas_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cumulative_gas_used());
  }

  // uint32 cnt_steps = 11;
  if (this->cnt_steps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_steps());
  }

  // .executor.v1.ExecutorError error = 14;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  // uint64 flush_id = 16;
  if (this->flush_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_flush_id());
  }

  // uint64 stored_flush_id = 17;
  if (this->stored_flush_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stored_flush_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessBatchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.ProcessBatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessBatchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessBatchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.ProcessBatchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.ProcessBatchResponse)
    MergeFrom(*source);
  }
}

void ProcessBatchResponse::MergeFrom(const ProcessBatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessBatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  read_write_addresses_.MergeFrom(from.read_write_addresses_);
  nodes_keys_.MergeFrom(from.nodes_keys_);
  program_keys_.MergeFrom(from.program_keys_);
  if (from.new_state_root().size() > 0) {
    _internal_set_new_state_root(from._internal_new_state_root());
  }
  if (from.new_acc_input_hash().size() > 0) {
    _internal_set_new_acc_input_hash(from._internal_new_acc_input_hash());
  }
  if (from.new_local_exit_root().size() > 0) {
    _internal_set_new_local_exit_root(from._internal_new_local_exit_root());
  }
  if (from.prover_id().size() > 0) {
    _internal_set_prover_id(from._internal_prover_id());
  }
  if (from.new_batch_num() != 0) {
    _internal_set_new_batch_num(from._internal_new_batch_num());
  }
  if (from.cnt_keccak_hashes() != 0) {
    _internal_set_cnt_keccak_hashes(from._internal_cnt_keccak_hashes());
  }
  if (from.cnt_poseidon_hashes() != 0) {
    _internal_set_cnt_poseidon_hashes(from._internal_cnt_poseidon_hashes());
  }
  if (from.cnt_poseidon_paddings() != 0) {
    _internal_set_cnt_poseidon_paddings(from._internal_cnt_poseidon_paddings());
  }
  if (from.cnt_mem_aligns() != 0) {
    _internal_set_cnt_mem_aligns(from._internal_cnt_mem_aligns());
  }
  if (from.cnt_arithmetics() != 0) {
    _internal_set_cnt_arithmetics(from._internal_cnt_arithmetics());
  }
  if (from.cnt_binaries() != 0) {
    _internal_set_cnt_binaries(from._internal_cnt_binaries());
  }
  if (from.cumulative_gas_used() != 0) {
    _internal_set_cumulative_gas_used(from._internal_cumulative_gas_used());
  }
  if (from.cnt_steps() != 0) {
    _internal_set_cnt_steps(from._internal_cnt_steps());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.flush_id() != 0) {
    _internal_set_flush_id(from._internal_flush_id());
  }
  if (from.stored_flush_id() != 0) {
    _internal_set_stored_flush_id(from._internal_stored_flush_id());
  }
}

void ProcessBatchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.ProcessBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessBatchResponse::CopyFrom(const ProcessBatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBatchResponse::IsInitialized() const {
  return true;
}

void ProcessBatchResponse::InternalSwap(ProcessBatchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  read_write_addresses_.Swap(&other->read_write_addresses_);
  nodes_keys_.InternalSwap(&other->nodes_keys_);
  program_keys_.InternalSwap(&other->program_keys_);
  new_state_root_.Swap(&other->new_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_acc_input_hash_.Swap(&other->new_acc_input_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_local_exit_root_.Swap(&other->new_local_exit_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prover_id_.Swap(&other->prover_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessBatchResponse, stored_flush_id_)
      + sizeof(ProcessBatchResponse::stored_flush_id_)
      - PROTOBUF_FIELD_OFFSET(ProcessBatchResponse, new_batch_num_)>(
          reinterpret_cast<char*>(&new_batch_num_),
          reinterpret_cast<char*>(&other->new_batch_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFlushStatusResponse::InitAsDefaultInstance() {
}
class GetFlushStatusResponse::_Internal {
 public:
};

GetFlushStatusResponse::GetFlushStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.GetFlushStatusResponse)
}
GetFlushStatusResponse::GetFlushStatusResponse(const GetFlushStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prover_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prover_id().empty()) {
    prover_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prover_id(),
      GetArena());
  }
  ::memcpy(&stored_flush_id_, &from.stored_flush_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&storing_program_) -
    reinterpret_cast<char*>(&stored_flush_id_)) + sizeof(storing_program_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.GetFlushStatusResponse)
}

void GetFlushStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFlushStatusResponse_executor_2eproto.base);
  prover_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stored_flush_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storing_program_) -
      reinterpret_cast<char*>(&stored_flush_id_)) + sizeof(storing_program_));
}

GetFlushStatusResponse::~GetFlushStatusResponse() {
  // @@protoc_insertion_point(destructor:executor.v1.GetFlushStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetFlushStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prover_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFlushStatusResponse::ArenaDtor(void* object) {
  GetFlushStatusResponse* _this = reinterpret_cast< GetFlushStatusResponse* >(object);
  (void)_this;
}
void GetFlushStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFlushStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFlushStatusResponse& GetFlushStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFlushStatusResponse_executor_2eproto.base);
  return *internal_default_instance();
}


void GetFlushStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.GetFlushStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prover_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&stored_flush_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storing_program_) -
      reinterpret_cast<char*>(&stored_flush_id_)) + sizeof(storing_program_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 stored_flush_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stored_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 storing_flush_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          storing_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_flush_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pending_to_flush_nodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pending_to_flush_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pending_to_flush_program = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pending_to_flush_program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 storing_nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          storing_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 storing_program = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          storing_program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prover_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_prover_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.GetFlushStatusResponse.prover_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFlushStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.GetFlushStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stored_flush_id = 1;
  if (this->stored_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stored_flush_id(), target);
  }

  // uint64 storing_flush_id = 2;
  if (this->storing_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_storing_flush_id(), target);
  }

  // uint64 last_flush_id = 3;
  if (this->last_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_flush_id(), target);
  }

  // uint64 pending_to_flush_nodes = 4;
  if (this->pending_to_flush_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pending_to_flush_nodes(), target);
  }

  // uint64 pending_to_flush_program = 5;
  if (this->pending_to_flush_program() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_pending_to_flush_program(), target);
  }

  // uint64 storing_nodes = 6;
  if (this->storing_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_storing_nodes(), target);
  }

  // uint64 storing_program = 7;
  if (this->storing_program() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_storing_program(), target);
  }

  // string prover_id = 8;
  if (this->prover_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prover_id().data(), static_cast<int>(this->_internal_prover_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.GetFlushStatusResponse.prover_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_prover_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.GetFlushStatusResponse)
  return target;
}

size_t GetFlushStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.GetFlushStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prover_id = 8;
  if (this->prover_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prover_id());
  }

  // uint64 stored_flush_id = 1;
  if (this->stored_flush_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stored_flush_id());
  }

  // uint64 storing_flush_id = 2;
  if (this->storing_flush_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_storing_flush_id());
  }

  // uint64 last_flush_id = 3;
  if (this->last_flush_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_flush_id());
  }

  // uint64 pending_to_flush_nodes = 4;
  if (this->pending_to_flush_nodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pending_to_flush_nodes());
  }

  // uint64 pending_to_flush_program = 5;
  if (this->pending_to_flush_program() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pending_to_flush_program());
  }

  // uint64 storing_nodes = 6;
  if (this->storing_nodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_storing_nodes());
  }

  // uint64 storing_program = 7;
  if (this->storing_program() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_storing_program());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFlushStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.GetFlushStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFlushStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFlushStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.GetFlushStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.GetFlushStatusResponse)
    MergeFrom(*source);
  }
}

void GetFlushStatusResponse::MergeFrom(const GetFlushStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.GetFlushStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prover_id().size() > 0) {
    _internal_set_prover_id(from._internal_prover_id());
  }
  if (from.stored_flush_id() != 0) {
    _internal_set_stored_flush_id(from._internal_stored_flush_id());
  }
  if (from.storing_flush_id() != 0) {
    _internal_set_storing_flush_id(from._internal_storing_flush_id());
  }
  if (from.last_flush_id() != 0) {
    _internal_set_last_flush_id(from._internal_last_flush_id());
  }
  if (from.pending_to_flush_nodes() != 0) {
    _internal_set_pending_to_flush_nodes(from._internal_pending_to_flush_nodes());
  }
  if (from.pending_to_flush_program() != 0) {
    _internal_set_pending_to_flush_program(from._internal_pending_to_flush_program());
  }
  if (from.storing_nodes() != 0) {
    _internal_set_storing_nodes(from._internal_storing_nodes());
  }
  if (from.storing_program() != 0) {
    _internal_set_storing_program(from._internal_storing_program());
  }
}

void GetFlushStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.GetFlushStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFlushStatusResponse::CopyFrom(const GetFlushStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.GetFlushStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushStatusResponse::IsInitialized() const {
  return true;
}

void GetFlushStatusResponse::InternalSwap(GetFlushStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prover_id_.Swap(&other->prover_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlushStatusResponse, storing_program_)
      + sizeof(GetFlushStatusResponse::storing_program_)
      - PROTOBUF_FIELD_OFFSET(GetFlushStatusResponse, stored_flush_id_)>(
          reinterpret_cast<char*>(&stored_flush_id_),
          reinterpret_cast<char*>(&other->stored_flush_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TraceConfig::InitAsDefaultInstance() {
}
class TraceConfig::_Internal {
 public:
};

TraceConfig::TraceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.TraceConfig)
}
TraceConfig::TraceConfig(const TraceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_hash_to_generate_execute_trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash_to_generate_execute_trace().empty()) {
    tx_hash_to_generate_execute_trace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tx_hash_to_generate_execute_trace(),
      GetArena());
  }
  tx_hash_to_generate_call_trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash_to_generate_call_trace().empty()) {
    tx_hash_to_generate_call_trace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tx_hash_to_generate_call_trace(),
      GetArena());
  }
  ::memcpy(&disable_storage_, &from.disable_storage_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_return_data_) -
    reinterpret_cast<char*>(&disable_storage_)) + sizeof(enable_return_data_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TraceConfig)
}

void TraceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceConfig_executor_2eproto.base);
  tx_hash_to_generate_execute_trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_to_generate_call_trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&disable_storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_return_data_) -
      reinterpret_cast<char*>(&disable_storage_)) + sizeof(enable_return_data_));
}

TraceConfig::~TraceConfig() {
  // @@protoc_insertion_point(destructor:executor.v1.TraceConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TraceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_hash_to_generate_execute_trace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_to_generate_call_trace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TraceConfig::ArenaDtor(void* object) {
  TraceConfig* _this = reinterpret_cast< TraceConfig* >(object);
  (void)_this;
}
void TraceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TraceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfig& TraceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceConfig_executor_2eproto.base);
  return *internal_default_instance();
}


void TraceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TraceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_hash_to_generate_execute_trace_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_to_generate_call_trace_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&disable_storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_return_data_) -
      reinterpret_cast<char*>(&disable_storage_)) + sizeof(enable_return_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 disable_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          disable_storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 disable_stack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          disable_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 enable_memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enable_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 enable_return_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enable_return_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tx_hash_to_generate_execute_trace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tx_hash_to_generate_execute_trace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tx_hash_to_generate_call_trace = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_tx_hash_to_generate_call_trace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TraceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TraceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 disable_storage = 1;
  if (this->disable_storage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_disable_storage(), target);
  }

  // uint32 disable_stack = 2;
  if (this->disable_stack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_disable_stack(), target);
  }

  // uint32 enable_memory = 3;
  if (this->enable_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_enable_memory(), target);
  }

  // uint32 enable_return_data = 4;
  if (this->enable_return_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_enable_return_data(), target);
  }

  // bytes tx_hash_to_generate_execute_trace = 5;
  if (this->tx_hash_to_generate_execute_trace().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tx_hash_to_generate_execute_trace(), target);
  }

  // bytes tx_hash_to_generate_call_trace = 6;
  if (this->tx_hash_to_generate_call_trace().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_tx_hash_to_generate_call_trace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TraceConfig)
  return target;
}

size_t TraceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TraceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx_hash_to_generate_execute_trace = 5;
  if (this->tx_hash_to_generate_execute_trace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash_to_generate_execute_trace());
  }

  // bytes tx_hash_to_generate_call_trace = 6;
  if (this->tx_hash_to_generate_call_trace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash_to_generate_call_trace());
  }

  // uint32 disable_storage = 1;
  if (this->disable_storage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_disable_storage());
  }

  // uint32 disable_stack = 2;
  if (this->disable_stack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_disable_stack());
  }

  // uint32 enable_memory = 3;
  if (this->enable_memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_enable_memory());
  }

  // uint32 enable_return_data = 4;
  if (this->enable_return_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_enable_return_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.TraceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TraceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.TraceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.TraceConfig)
    MergeFrom(*source);
  }
}

void TraceConfig::MergeFrom(const TraceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TraceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_hash_to_generate_execute_trace().size() > 0) {
    _internal_set_tx_hash_to_generate_execute_trace(from._internal_tx_hash_to_generate_execute_trace());
  }
  if (from.tx_hash_to_generate_call_trace().size() > 0) {
    _internal_set_tx_hash_to_generate_call_trace(from._internal_tx_hash_to_generate_call_trace());
  }
  if (from.disable_storage() != 0) {
    _internal_set_disable_storage(from._internal_disable_storage());
  }
  if (from.disable_stack() != 0) {
    _internal_set_disable_stack(from._internal_disable_stack());
  }
  if (from.enable_memory() != 0) {
    _internal_set_enable_memory(from._internal_enable_memory());
  }
  if (from.enable_return_data() != 0) {
    _internal_set_enable_return_data(from._internal_enable_return_data());
  }
}

void TraceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.TraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceConfig::CopyFrom(const TraceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig::IsInitialized() const {
  return true;
}

void TraceConfig::InternalSwap(TraceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_hash_to_generate_execute_trace_.Swap(&other->tx_hash_to_generate_execute_trace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_to_generate_call_trace_.Swap(&other->tx_hash_to_generate_call_trace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig, enable_return_data_)
      + sizeof(TraceConfig::enable_return_data_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig, disable_storage_)>(
          reinterpret_cast<char*>(&disable_storage_),
          reinterpret_cast<char*>(&other->disable_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InfoReadWrite::InitAsDefaultInstance() {
}
class InfoReadWrite::_Internal {
 public:
};

InfoReadWrite::InfoReadWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.InfoReadWrite)
}
InfoReadWrite::InfoReadWrite(const InfoReadWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nonce(),
      GetArena());
  }
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_balance().empty()) {
    balance_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_balance(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:executor.v1.InfoReadWrite)
}

void InfoReadWrite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InfoReadWrite_executor_2eproto.base);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InfoReadWrite::~InfoReadWrite() {
  // @@protoc_insertion_point(destructor:executor.v1.InfoReadWrite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InfoReadWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InfoReadWrite::ArenaDtor(void* object) {
  InfoReadWrite* _this = reinterpret_cast< InfoReadWrite* >(object);
  (void)_this;
}
void InfoReadWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InfoReadWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InfoReadWrite& InfoReadWrite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InfoReadWrite_executor_2eproto.base);
  return *internal_default_instance();
}


void InfoReadWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.InfoReadWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  balance_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoReadWrite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.InfoReadWrite.nonce"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_balance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.InfoReadWrite.balance"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InfoReadWrite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.InfoReadWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nonce = 1;
  if (this->nonce().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.InfoReadWrite.nonce");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nonce(), target);
  }

  // string balance = 2;
  if (this->balance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_balance().data(), static_cast<int>(this->_internal_balance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.InfoReadWrite.balance");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.InfoReadWrite)
  return target;
}

size_t InfoReadWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.InfoReadWrite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nonce = 1;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  // string balance = 2;
  if (this->balance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoReadWrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.InfoReadWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoReadWrite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InfoReadWrite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.InfoReadWrite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.InfoReadWrite)
    MergeFrom(*source);
  }
}

void InfoReadWrite::MergeFrom(const InfoReadWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.InfoReadWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nonce().size() > 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.balance().size() > 0) {
    _internal_set_balance(from._internal_balance());
  }
}

void InfoReadWrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.InfoReadWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoReadWrite::CopyFrom(const InfoReadWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.InfoReadWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoReadWrite::IsInitialized() const {
  return true;
}

void InfoReadWrite::InternalSwap(InfoReadWrite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  balance_.Swap(&other->balance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoReadWrite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CallTrace::InitAsDefaultInstance() {
  ::executor::v1::_CallTrace_default_instance_._instance.get_mutable()->context_ = const_cast< ::executor::v1::TransactionContext*>(
      ::executor::v1::TransactionContext::internal_default_instance());
}
class CallTrace::_Internal {
 public:
  static const ::executor::v1::TransactionContext& context(const CallTrace* msg);
};

const ::executor::v1::TransactionContext&
CallTrace::_Internal::context(const CallTrace* msg) {
  return *msg->context_;
}
CallTrace::CallTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  steps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.CallTrace)
}
CallTrace::CallTrace(const CallTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      steps_(from.steps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_context()) {
    context_ = new ::executor::v1::TransactionContext(*from.context_);
  } else {
    context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:executor.v1.CallTrace)
}

void CallTrace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CallTrace_executor_2eproto.base);
  context_ = nullptr;
}

CallTrace::~CallTrace() {
  // @@protoc_insertion_point(destructor:executor.v1.CallTrace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CallTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete context_;
}

void CallTrace::ArenaDtor(void* object) {
  CallTrace* _this = reinterpret_cast< CallTrace* >(object);
  (void)_this;
}
void CallTrace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CallTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallTrace& CallTrace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallTrace_executor_2eproto.base);
  return *internal_default_instance();
}


void CallTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.CallTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steps_.Clear();
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallTrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .executor.v1.TransactionContext context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .executor.v1.TransactionStep steps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CallTrace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.CallTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .executor.v1.TransactionContext context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // repeated .executor.v1.TransactionStep steps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_steps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.CallTrace)
  return target;
}

size_t CallTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.CallTrace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.TransactionStep steps = 2;
  total_size += 1UL * this->_internal_steps_size();
  for (const auto& msg : this->steps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .executor.v1.TransactionContext context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallTrace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.CallTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const CallTrace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CallTrace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.CallTrace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.CallTrace)
    MergeFrom(*source);
  }
}

void CallTrace::MergeFrom(const CallTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.CallTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steps_.MergeFrom(from.steps_);
  if (from.has_context()) {
    _internal_mutable_context()->::executor::v1::TransactionContext::MergeFrom(from._internal_context());
  }
}

void CallTrace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.CallTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallTrace::CopyFrom(const CallTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.CallTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallTrace::IsInitialized() const {
  return true;
}

void CallTrace::InternalSwap(CallTrace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  steps_.InternalSwap(&other->steps_);
  swap(context_, other->context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallTrace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionContext::InitAsDefaultInstance() {
}
class TransactionContext::_Internal {
 public:
};

TransactionContext::TransactionContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.TransactionContext)
}
TransactionContext::TransactionContext(const TransactionContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from(),
      GetArena());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  batch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch().empty()) {
    batch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_batch(),
      GetArena());
  }
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output().empty()) {
    output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_output(),
      GetArena());
  }
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gas_price().empty()) {
    gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gas_price(),
      GetArena());
  }
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_state_root().empty()) {
    old_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_state_root(),
      GetArena());
  }
  ::memcpy(&gas_, &from.gas_,
    static_cast<size_t>(reinterpret_cast<char*>(&execution_time_) -
    reinterpret_cast<char*>(&gas_)) + sizeof(execution_time_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TransactionContext)
}

void TransactionContext::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionContext_executor_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_time_) -
      reinterpret_cast<char*>(&gas_)) + sizeof(execution_time_));
}

TransactionContext::~TransactionContext() {
  // @@protoc_insertion_point(destructor:executor.v1.TransactionContext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionContext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionContext::ArenaDtor(void* object) {
  TransactionContext* _this = reinterpret_cast< TransactionContext* >(object);
  (void)_this;
}
void TransactionContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionContext& TransactionContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionContext_executor_2eproto.base);
  return *internal_default_instance();
}


void TransactionContext::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TransactionContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_price_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_time_) -
      reinterpret_cast<char*>(&gas_)) + sizeof(execution_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContext.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContext.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContext.to"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContext.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes batch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_batch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes output = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_output();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_used = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gas_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_gas_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContext.gas_price"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 execution_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          execution_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes old_state_root = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_old_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TransactionContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string from = 2;
  if (this->from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.from");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from(), target);
  }

  // string to = 3;
  if (this->to().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.to");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // uint64 gas = 5;
  if (this->gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas(), target);
  }

  // string value = 6;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_value(), target);
  }

  // bytes batch = 7;
  if (this->batch().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_batch(), target);
  }

  // bytes output = 8;
  if (this->output().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_output(), target);
  }

  // uint64 gas_used = 9;
  if (this->gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_gas_used(), target);
  }

  // string gas_price = 10;
  if (this->gas_price().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gas_price().data(), static_cast<int>(this->_internal_gas_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.gas_price");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_gas_price(), target);
  }

  // uint32 execution_time = 11;
  if (this->execution_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_execution_time(), target);
  }

  // bytes old_state_root = 12;
  if (this->old_state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_old_state_root(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TransactionContext)
  return target;
}

size_t TransactionContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TransactionContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string from = 2;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 3;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string value = 6;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bytes batch = 7;
  if (this->batch().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_batch());
  }

  // bytes output = 8;
  if (this->output().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_output());
  }

  // string gas_price = 10;
  if (this->gas_price().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gas_price());
  }

  // bytes old_state_root = 12;
  if (this->old_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_state_root());
  }

  // uint64 gas = 5;
  if (this->gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas());
  }

  // uint64 gas_used = 9;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_used());
  }

  // uint32 execution_time = 11;
  if (this->execution_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_execution_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.TransactionContext)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.TransactionContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.TransactionContext)
    MergeFrom(*source);
  }
}

void TransactionContext::MergeFrom(const TransactionContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TransactionContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to().size() > 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.batch().size() > 0) {
    _internal_set_batch(from._internal_batch());
  }
  if (from.output().size() > 0) {
    _internal_set_output(from._internal_output());
  }
  if (from.gas_price().size() > 0) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (from.old_state_root().size() > 0) {
    _internal_set_old_state_root(from._internal_old_state_root());
  }
  if (from.gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
  if (from.gas_used() != 0) {
    _internal_set_gas_used(from._internal_gas_used());
  }
  if (from.execution_time() != 0) {
    _internal_set_execution_time(from._internal_execution_time());
  }
}

void TransactionContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.TransactionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionContext::CopyFrom(const TransactionContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TransactionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionContext::IsInitialized() const {
  return true;
}

void TransactionContext::InternalSwap(TransactionContext* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_.Swap(&other->batch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_.Swap(&other->output_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_price_.Swap(&other->gas_price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_state_root_.Swap(&other->old_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionContext, execution_time_)
      + sizeof(TransactionContext::execution_time_)
      - PROTOBUF_FIELD_OFFSET(TransactionContext, gas_)>(
          reinterpret_cast<char*>(&gas_),
          reinterpret_cast<char*>(&other->gas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionStep::InitAsDefaultInstance() {
  ::executor::v1::_TransactionStep_default_instance_._instance.get_mutable()->contract_ = const_cast< ::executor::v1::Contract*>(
      ::executor::v1::Contract::internal_default_instance());
}
class TransactionStep::_Internal {
 public:
  static const ::executor::v1::Contract& contract(const TransactionStep* msg);
};

const ::executor::v1::Contract&
TransactionStep::_Internal::contract(const TransactionStep* msg) {
  return *msg->contract_;
}
TransactionStep::TransactionStep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stack_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.TransactionStep)
}
TransactionStep::TransactionStep(const TransactionStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stack_(from.stack_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_root().empty()) {
    state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state_root(),
      GetArena());
  }
  memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memory().empty()) {
    memory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_memory(),
      GetArena());
  }
  return_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_return_data().empty()) {
    return_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_return_data(),
      GetArena());
  }
  if (from._internal_has_contract()) {
    contract_ = new ::executor::v1::Contract(*from.contract_);
  } else {
    contract_ = nullptr;
  }
  ::memcpy(&pc_, &from.pc_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&pc_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TransactionStep)
}

void TransactionStep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionStep_executor_2eproto.base);
  state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&contract_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&contract_)) + sizeof(error_));
}

TransactionStep::~TransactionStep() {
  // @@protoc_insertion_point(destructor:executor.v1.TransactionStep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionStep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete contract_;
}

void TransactionStep::ArenaDtor(void* object) {
  TransactionStep* _this = reinterpret_cast< TransactionStep* >(object);
  (void)_this;
}
void TransactionStep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionStep& TransactionStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionStep_executor_2eproto.base);
  return *internal_default_instance();
}


void TransactionStep::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TransactionStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stack_.Clear();
  state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && contract_ != nullptr) {
    delete contract_;
  }
  contract_ = nullptr;
  ::memset(&pc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&pc_)) + sizeof(error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_cost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gas_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_refund = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gas_refund_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 op = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string stack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stack();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionStep.stack"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes memory = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_memory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 memory_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 memory_offset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          memory_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes return_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_return_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .executor.v1.Contract contract = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .executor.v1.RomError error = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::RomError>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionStep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TransactionStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes state_root = 1;
  if (this->state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_state_root(), target);
  }

  // uint32 depth = 2;
  if (this->depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_depth(), target);
  }

  // uint64 pc = 3;
  if (this->pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pc(), target);
  }

  // uint64 gas = 4;
  if (this->gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gas(), target);
  }

  // uint64 gas_cost = 5;
  if (this->gas_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas_cost(), target);
  }

  // uint64 gas_refund = 6;
  if (this->gas_refund() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gas_refund(), target);
  }

  // uint32 op = 7;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_op(), target);
  }

  // repeated string stack = 8;
  for (int i = 0, n = this->_internal_stack_size(); i < n; i++) {
    const auto& s = this->_internal_stack(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionStep.stack");
    target = stream->WriteString(8, s, target);
  }

  // bytes memory = 9;
  if (this->memory().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_memory(), target);
  }

  // uint32 memory_size = 10;
  if (this->memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_memory_size(), target);
  }

  // uint32 memory_offset = 11;
  if (this->memory_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_memory_offset(), target);
  }

  // bytes return_data = 12;
  if (this->return_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_return_data(), target);
  }

  // .executor.v1.Contract contract = 13;
  if (this->has_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::contract(this), target, stream);
  }

  // .executor.v1.RomError error = 14;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TransactionStep)
  return target;
}

size_t TransactionStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TransactionStep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stack = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stack_.size());
  for (int i = 0, n = stack_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stack_.Get(i));
  }

  // bytes state_root = 1;
  if (this->state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_root());
  }

  // bytes memory = 9;
  if (this->memory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_memory());
  }

  // bytes return_data = 12;
  if (this->return_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_return_data());
  }

  // .executor.v1.Contract contract = 13;
  if (this->has_contract()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *contract_);
  }

  // uint64 pc = 3;
  if (this->pc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pc());
  }

  // uint64 gas = 4;
  if (this->gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas());
  }

  // uint32 depth = 2;
  if (this->depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_depth());
  }

  // uint32 op = 7;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op());
  }

  // uint64 gas_cost = 5;
  if (this->gas_cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_cost());
  }

  // uint64 gas_refund = 6;
  if (this->gas_refund() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_refund());
  }

  // uint32 memory_size = 10;
  if (this->memory_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memory_size());
  }

  // uint32 memory_offset = 11;
  if (this->memory_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memory_offset());
  }

  // .executor.v1.RomError error = 14;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionStep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.TransactionStep)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionStep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionStep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.TransactionStep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.TransactionStep)
    MergeFrom(*source);
  }
}

void TransactionStep::MergeFrom(const TransactionStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TransactionStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stack_.MergeFrom(from.stack_);
  if (from.state_root().size() > 0) {
    _internal_set_state_root(from._internal_state_root());
  }
  if (from.memory().size() > 0) {
    _internal_set_memory(from._internal_memory());
  }
  if (from.return_data().size() > 0) {
    _internal_set_return_data(from._internal_return_data());
  }
  if (from.has_contract()) {
    _internal_mutable_contract()->::executor::v1::Contract::MergeFrom(from._internal_contract());
  }
  if (from.pc() != 0) {
    _internal_set_pc(from._internal_pc());
  }
  if (from.gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
  if (from.depth() != 0) {
    _internal_set_depth(from._internal_depth());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
  if (from.gas_cost() != 0) {
    _internal_set_gas_cost(from._internal_gas_cost());
  }
  if (from.gas_refund() != 0) {
    _internal_set_gas_refund(from._internal_gas_refund());
  }
  if (from.memory_size() != 0) {
    _internal_set_memory_size(from._internal_memory_size());
  }
  if (from.memory_offset() != 0) {
    _internal_set_memory_offset(from._internal_memory_offset());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void TransactionStep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.TransactionStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionStep::CopyFrom(const TransactionStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TransactionStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStep::IsInitialized() const {
  return true;
}

void TransactionStep::InternalSwap(TransactionStep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stack_.InternalSwap(&other->stack_);
  state_root_.Swap(&other->state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memory_.Swap(&other->memory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_data_.Swap(&other->return_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionStep, error_)
      + sizeof(TransactionStep::error_)
      - PROTOBUF_FIELD_OFFSET(TransactionStep, contract_)>(
          reinterpret_cast<char*>(&contract_),
          reinterpret_cast<char*>(&other->contract_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionStep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Contract::InitAsDefaultInstance() {
}
class Contract::_Internal {
 public:
};

Contract::Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.Contract)
}
Contract::Contract(const Contract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_caller().empty()) {
    caller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_caller(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  gas_ = from.gas_;
  // @@protoc_insertion_point(copy_constructor:executor.v1.Contract)
}

void Contract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Contract_executor_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_ = PROTOBUF_ULONGLONG(0);
}

Contract::~Contract() {
  // @@protoc_insertion_point(destructor:executor.v1.Contract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Contract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Contract::ArenaDtor(void* object) {
  Contract* _this = reinterpret_cast< Contract* >(object);
  (void)_this;
}
void Contract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Contract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Contract& Contract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Contract_executor_2eproto.base);
  return *internal_default_instance();
}


void Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  caller_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Contract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.Contract.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string caller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_caller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.Contract.caller"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.Contract.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.Contract.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Contract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Contract.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caller().data(), static_cast<int>(this->_internal_caller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Contract.caller");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caller(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Contract.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // uint64 gas = 5;
  if (this->gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas(), target);
  }

  // string type = 6;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Contract.type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.Contract)
  return target;
}

size_t Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.Contract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caller());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string type = 6;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint64 gas = 5;
  if (this->gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.Contract)
  GOOGLE_DCHECK_NE(&from, this);
  const Contract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Contract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.Contract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.Contract)
    MergeFrom(*source);
  }
}

void Contract::MergeFrom(const Contract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.Contract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.caller().size() > 0) {
    _internal_set_caller(from._internal_caller());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
}

void Contract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contract::CopyFrom(const Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contract::IsInitialized() const {
  return true;
}

void Contract::InternalSwap(Contract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  caller_.Swap(&other->caller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(gas_, other->gas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Contract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessTransactionResponse::InitAsDefaultInstance() {
  ::executor::v1::_ProcessTransactionResponse_default_instance_._instance.get_mutable()->call_trace_ = const_cast< ::executor::v1::CallTrace*>(
      ::executor::v1::CallTrace::internal_default_instance());
}
class ProcessTransactionResponse::_Internal {
 public:
  static const ::executor::v1::CallTrace& call_trace(const ProcessTransactionResponse* msg);
};

const ::executor::v1::CallTrace&
ProcessTransactionResponse::_Internal::call_trace(const ProcessTransactionResponse* msg) {
  return *msg->call_trace_;
}
ProcessTransactionResponse::ProcessTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  logs_(arena),
  execution_trace_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessTransactionResponse)
}
ProcessTransactionResponse::ProcessTransactionResponse(const ProcessTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_),
      execution_trace_(from.execution_trace_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tx_hash(),
      GetArena());
  }
  rlp_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rlp_tx().empty()) {
    rlp_tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rlp_tx(),
      GetArena());
  }
  return_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_return_value().empty()) {
    return_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_return_value(),
      GetArena());
  }
  create_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_address().empty()) {
    create_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_create_address(),
      GetArena());
  }
  state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_root().empty()) {
    state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state_root(),
      GetArena());
  }
  effective_gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_effective_gas_price().empty()) {
    effective_gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_effective_gas_price(),
      GetArena());
  }
  if (from._internal_has_call_trace()) {
    call_trace_ = new ::executor::v1::CallTrace(*from.call_trace_);
  } else {
    call_trace_ = nullptr;
  }
  ::memcpy(&gas_left_, &from.gas_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_balance_opcode_) -
    reinterpret_cast<char*>(&gas_left_)) + sizeof(has_balance_opcode_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessTransactionResponse)
}

void ProcessTransactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessTransactionResponse_executor_2eproto.base);
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rlp_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effective_gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_trace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_balance_opcode_) -
      reinterpret_cast<char*>(&call_trace_)) + sizeof(has_balance_opcode_));
}

ProcessTransactionResponse::~ProcessTransactionResponse() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessTransactionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rlp_tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effective_gas_price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_trace_;
}

void ProcessTransactionResponse::ArenaDtor(void* object) {
  ProcessTransactionResponse* _this = reinterpret_cast< ProcessTransactionResponse* >(object);
  (void)_this;
}
void ProcessTransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessTransactionResponse& ProcessTransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessTransactionResponse_executor_2eproto.base);
  return *internal_default_instance();
}


void ProcessTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  execution_trace_.Clear();
  tx_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rlp_tx_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  create_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  effective_gas_price_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && call_trace_ != nullptr) {
    delete call_trace_;
  }
  call_trace_ = nullptr;
  ::memset(&gas_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_balance_opcode_) -
      reinterpret_cast<char*>(&gas_left_)) + sizeof(has_balance_opcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes tx_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rlp_tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rlp_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes return_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_return_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_left = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gas_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_used = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_refunded = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          gas_refunded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .executor.v1.RomError error = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::RomError>(val));
        } else goto handle_unusual;
        continue;
      // string create_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_create_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessTransactionResponse.create_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes state_root = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .executor.v1.Log logs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .executor.v1.ExecutionTraceStep execution_trace = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_execution_trace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // .executor.v1.CallTrace call_trace = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_trace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string effective_gas_price = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_effective_gas_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessTransactionResponse.effective_gas_price"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 effective_percentage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          effective_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 has_gasprice_opcode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          has_gasprice_opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 has_balance_opcode = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          has_balance_opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx_hash(), target);
  }

  // bytes rlp_tx = 2;
  if (this->rlp_tx().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_rlp_tx(), target);
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // bytes return_value = 4;
  if (this->return_value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_return_value(), target);
  }

  // uint64 gas_left = 5;
  if (this->gas_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas_left(), target);
  }

  // uint64 gas_used = 6;
  if (this->gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gas_used(), target);
  }

  // uint64 gas_refunded = 7;
  if (this->gas_refunded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_gas_refunded(), target);
  }

  // .executor.v1.RomError error = 8;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_error(), target);
  }

  // string create_address = 9;
  if (this->create_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_address().data(), static_cast<int>(this->_internal_create_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessTransactionResponse.create_address");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_create_address(), target);
  }

  // bytes state_root = 10;
  if (this->state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_state_root(), target);
  }

  // repeated .executor.v1.Log logs = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_logs(i), target, stream);
  }

  // repeated .executor.v1.ExecutionTraceStep execution_trace = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_execution_trace_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_execution_trace(i), target, stream);
  }

  // .executor.v1.CallTrace call_trace = 14;
  if (this->has_call_trace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::call_trace(this), target, stream);
  }

  // string effective_gas_price = 15;
  if (this->effective_gas_price().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_effective_gas_price().data(), static_cast<int>(this->_internal_effective_gas_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessTransactionResponse.effective_gas_price");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_effective_gas_price(), target);
  }

  // uint32 effective_percentage = 16;
  if (this->effective_percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_effective_percentage(), target);
  }

  // uint32 has_gasprice_opcode = 17;
  if (this->has_gasprice_opcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_has_gasprice_opcode(), target);
  }

  // uint32 has_balance_opcode = 18;
  if (this->has_balance_opcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_has_balance_opcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessTransactionResponse)
  return target;
}

size_t ProcessTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.Log logs = 11;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .executor.v1.ExecutionTraceStep execution_trace = 13;
  total_size += 1UL * this->_internal_execution_trace_size();
  for (const auto& msg : this->execution_trace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash());
  }

  // bytes rlp_tx = 2;
  if (this->rlp_tx().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rlp_tx());
  }

  // bytes return_value = 4;
  if (this->return_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_return_value());
  }

  // string create_address = 9;
  if (this->create_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_address());
  }

  // bytes state_root = 10;
  if (this->state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_root());
  }

  // string effective_gas_price = 15;
  if (this->effective_gas_price().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effective_gas_price());
  }

  // .executor.v1.CallTrace call_trace = 14;
  if (this->has_call_trace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_trace_);
  }

  // uint64 gas_left = 5;
  if (this->gas_left() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_left());
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // .executor.v1.RomError error = 8;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  // uint64 gas_used = 6;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_used());
  }

  // uint64 gas_refunded = 7;
  if (this->gas_refunded() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_refunded());
  }

  // uint32 effective_percentage = 16;
  if (this->effective_percentage() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_effective_percentage());
  }

  // uint32 has_gasprice_opcode = 17;
  if (this->has_gasprice_opcode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_has_gasprice_opcode());
  }

  // uint32 has_balance_opcode = 18;
  if (this->has_balance_opcode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_has_balance_opcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.ProcessTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.ProcessTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.ProcessTransactionResponse)
    MergeFrom(*source);
  }
}

void ProcessTransactionResponse::MergeFrom(const ProcessTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  execution_trace_.MergeFrom(from.execution_trace_);
  if (from.tx_hash().size() > 0) {
    _internal_set_tx_hash(from._internal_tx_hash());
  }
  if (from.rlp_tx().size() > 0) {
    _internal_set_rlp_tx(from._internal_rlp_tx());
  }
  if (from.return_value().size() > 0) {
    _internal_set_return_value(from._internal_return_value());
  }
  if (from.create_address().size() > 0) {
    _internal_set_create_address(from._internal_create_address());
  }
  if (from.state_root().size() > 0) {
    _internal_set_state_root(from._internal_state_root());
  }
  if (from.effective_gas_price().size() > 0) {
    _internal_set_effective_gas_price(from._internal_effective_gas_price());
  }
  if (from.has_call_trace()) {
    _internal_mutable_call_trace()->::executor::v1::CallTrace::MergeFrom(from._internal_call_trace());
  }
  if (from.gas_left() != 0) {
    _internal_set_gas_left(from._internal_gas_left());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.gas_used() != 0) {
    _internal_set_gas_used(from._internal_gas_used());
  }
  if (from.gas_refunded() != 0) {
    _internal_set_gas_refunded(from._internal_gas_refunded());
  }
  if (from.effective_percentage() != 0) {
    _internal_set_effective_percentage(from._internal_effective_percentage());
  }
  if (from.has_gasprice_opcode() != 0) {
    _internal_set_has_gasprice_opcode(from._internal_has_gasprice_opcode());
  }
  if (from.has_balance_opcode() != 0) {
    _internal_set_has_balance_opcode(from._internal_has_balance_opcode());
  }
}

void ProcessTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.ProcessTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessTransactionResponse::CopyFrom(const ProcessTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTransactionResponse::IsInitialized() const {
  return true;
}

void ProcessTransactionResponse::InternalSwap(ProcessTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  logs_.InternalSwap(&other->logs_);
  execution_trace_.InternalSwap(&other->execution_trace_);
  tx_hash_.Swap(&other->tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rlp_tx_.Swap(&other->rlp_tx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_value_.Swap(&other->return_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  create_address_.Swap(&other->create_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_root_.Swap(&other->state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  effective_gas_price_.Swap(&other->effective_gas_price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessTransactionResponse, has_balance_opcode_)
      + sizeof(ProcessTransactionResponse::has_balance_opcode_)
      - PROTOBUF_FIELD_OFFSET(ProcessTransactionResponse, call_trace_)>(
          reinterpret_cast<char*>(&call_trace_),
          reinterpret_cast<char*>(&other->call_trace_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Log::InitAsDefaultInstance() {
}
class Log::_Internal {
 public:
};

Log::Log(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  topics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.Log)
}
Log::Log(const Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      topics_(from.topics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tx_hash(),
      GetArena());
  }
  batch_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_hash().empty()) {
    batch_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_batch_hash(),
      GetArena());
  }
  ::memcpy(&batch_number_, &from.batch_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&batch_number_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.Log)
}

void Log::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Log_executor_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&batch_number_)) + sizeof(index_));
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:executor.v1.Log)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Log::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Log::ArenaDtor(void* object) {
  Log* _this = reinterpret_cast< Log* >(object);
  (void)_this;
}
void Log::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Log::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Log& Log::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Log_executor_2eproto.base);
  return *internal_default_instance();
}


void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&batch_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&batch_number_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Log::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.Log.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes topics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_topics();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 batch_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          batch_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tx_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tx_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tx_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes batch_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_batch_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Log::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Log.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // repeated bytes topics = 2;
  for (int i = 0, n = this->_internal_topics_size(); i < n; i++) {
    const auto& s = this->_internal_topics(i);
    target = stream->WriteBytes(2, s, target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  // uint64 batch_number = 4;
  if (this->batch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_batch_number(), target);
  }

  // bytes tx_hash = 5;
  if (this->tx_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tx_hash(), target);
  }

  // uint32 tx_index = 6;
  if (this->tx_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tx_index(), target);
  }

  // bytes batch_hash = 7;
  if (this->batch_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_batch_hash(), target);
  }

  // uint32 index = 8;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.Log)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes topics = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(topics_.size());
  for (int i = 0, n = topics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      topics_.Get(i));
  }

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes tx_hash = 5;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash());
  }

  // bytes batch_hash = 7;
  if (this->batch_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_batch_hash());
  }

  // uint64 batch_number = 4;
  if (this->batch_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_batch_number());
  }

  // uint32 tx_index = 6;
  if (this->tx_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tx_index());
  }

  // uint32 index = 8;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Log::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.Log)
  GOOGLE_DCHECK_NE(&from, this);
  const Log* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Log>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.Log)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.Log)
    MergeFrom(*source);
  }
}

void Log::MergeFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.Log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.tx_hash().size() > 0) {
    _internal_set_tx_hash(from._internal_tx_hash());
  }
  if (from.batch_hash().size() > 0) {
    _internal_set_batch_hash(from._internal_batch_hash());
  }
  if (from.batch_number() != 0) {
    _internal_set_batch_number(from._internal_batch_number());
  }
  if (from.tx_index() != 0) {
    _internal_set_tx_index(from._internal_tx_index());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void Log::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::InternalSwap(Log* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  topics_.InternalSwap(&other->topics_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_.Swap(&other->tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_hash_.Swap(&other->batch_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Log, index_)
      + sizeof(Log::index_)
      - PROTOBUF_FIELD_OFFSET(Log, batch_number_)>(
          reinterpret_cast<char*>(&batch_number_),
          reinterpret_cast<char*>(&other->batch_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Log::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ExecutionTraceStep_StorageEntry_DoNotUse::ExecutionTraceStep_StorageEntry_DoNotUse() {}
ExecutionTraceStep_StorageEntry_DoNotUse::ExecutionTraceStep_StorageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ExecutionTraceStep_StorageEntry_DoNotUse::MergeFrom(const ExecutionTraceStep_StorageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ExecutionTraceStep_StorageEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ExecutionTraceStep_StorageEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ExecutionTraceStep::InitAsDefaultInstance() {
}
class ExecutionTraceStep::_Internal {
 public:
};

ExecutionTraceStep::ExecutionTraceStep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stack_(arena),
  storage_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ExecutionTraceStep)
}
ExecutionTraceStep::ExecutionTraceStep(const ExecutionTraceStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stack_(from.stack_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  storage_.MergeFrom(from.storage_);
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op().empty()) {
    op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_op(),
      GetArena());
  }
  memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memory().empty()) {
    memory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_memory(),
      GetArena());
  }
  return_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_return_data().empty()) {
    return_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_return_data(),
      GetArena());
  }
  ::memcpy(&pc_, &from.pc_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&pc_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ExecutionTraceStep)
}

void ExecutionTraceStep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecutionTraceStep_executor_2eproto.base);
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&pc_)) + sizeof(error_));
}

ExecutionTraceStep::~ExecutionTraceStep() {
  // @@protoc_insertion_point(destructor:executor.v1.ExecutionTraceStep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecutionTraceStep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  op_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecutionTraceStep::ArenaDtor(void* object) {
  ExecutionTraceStep* _this = reinterpret_cast< ExecutionTraceStep* >(object);
  (void)_this;
}
void ExecutionTraceStep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionTraceStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionTraceStep& ExecutionTraceStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecutionTraceStep_executor_2eproto.base);
  return *internal_default_instance();
}


void ExecutionTraceStep::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ExecutionTraceStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stack_.Clear();
  storage_.Clear();
  op_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&pc_)) + sizeof(error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionTraceStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_op();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ExecutionTraceStep.op"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 remaining_gas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remaining_gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_cost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gas_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes memory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_memory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 memory_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 memory_offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          memory_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string stack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stack();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ExecutionTraceStep.stack"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes return_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_return_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> storage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&storage_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 depth = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_refund = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          gas_refund_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .executor.v1.RomError error = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::RomError>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecutionTraceStep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ExecutionTraceStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pc = 1;
  if (this->pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pc(), target);
  }

  // string op = 2;
  if (this->op().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op().data(), static_cast<int>(this->_internal_op().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ExecutionTraceStep.op");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_op(), target);
  }

  // uint64 remaining_gas = 3;
  if (this->remaining_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_remaining_gas(), target);
  }

  // uint64 gas_cost = 4;
  if (this->gas_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gas_cost(), target);
  }

  // bytes memory = 5;
  if (this->memory().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_memory(), target);
  }

  // uint32 memory_size = 6;
  if (this->memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_memory_size(), target);
  }

  // uint32 memory_offset = 7;
  if (this->memory_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_memory_offset(), target);
  }

  // repeated string stack = 8;
  for (int i = 0, n = this->_internal_stack_size(); i < n; i++) {
    const auto& s = this->_internal_stack(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ExecutionTraceStep.stack");
    target = stream->WriteString(8, s, target);
  }

  // bytes return_data = 9;
  if (this->return_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_return_data(), target);
  }

  // map<string, string> storage = 10;
  if (!this->_internal_storage().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ExecutionTraceStep.StorageEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ExecutionTraceStep.StorageEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_storage().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_storage().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_storage().begin();
          it != this->_internal_storage().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ExecutionTraceStep_StorageEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_storage().begin();
          it != this->_internal_storage().end(); ++it) {
        target = ExecutionTraceStep_StorageEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // uint32 depth = 11;
  if (this->depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_depth(), target);
  }

  // uint64 gas_refund = 12;
  if (this->gas_refund() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_gas_refund(), target);
  }

  // .executor.v1.RomError error = 13;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ExecutionTraceStep)
  return target;
}

size_t ExecutionTraceStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ExecutionTraceStep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stack = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stack_.size());
  for (int i = 0, n = stack_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stack_.Get(i));
  }

  // map<string, string> storage = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_storage_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_storage().begin();
      it != this->_internal_storage().end(); ++it) {
    total_size += ExecutionTraceStep_StorageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string op = 2;
  if (this->op().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op());
  }

  // bytes memory = 5;
  if (this->memory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_memory());
  }

  // bytes return_data = 9;
  if (this->return_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_return_data());
  }

  // uint64 pc = 1;
  if (this->pc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pc());
  }

  // uint64 remaining_gas = 3;
  if (this->remaining_gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_remaining_gas());
  }

  // uint64 gas_cost = 4;
  if (this->gas_cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_cost());
  }

  // uint32 memory_size = 6;
  if (this->memory_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memory_size());
  }

  // uint32 memory_offset = 7;
  if (this->memory_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memory_offset());
  }

  // uint64 gas_refund = 12;
  if (this->gas_refund() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_refund());
  }

  // uint32 depth = 11;
  if (this->depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_depth());
  }

  // .executor.v1.RomError error = 13;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionTraceStep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.ExecutionTraceStep)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionTraceStep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecutionTraceStep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.ExecutionTraceStep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.ExecutionTraceStep)
    MergeFrom(*source);
  }
}

void ExecutionTraceStep::MergeFrom(const ExecutionTraceStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ExecutionTraceStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stack_.MergeFrom(from.stack_);
  storage_.MergeFrom(from.storage_);
  if (from.op().size() > 0) {
    _internal_set_op(from._internal_op());
  }
  if (from.memory().size() > 0) {
    _internal_set_memory(from._internal_memory());
  }
  if (from.return_data().size() > 0) {
    _internal_set_return_data(from._internal_return_data());
  }
  if (from.pc() != 0) {
    _internal_set_pc(from._internal_pc());
  }
  if (from.remaining_gas() != 0) {
    _internal_set_remaining_gas(from._internal_remaining_gas());
  }
  if (from.gas_cost() != 0) {
    _internal_set_gas_cost(from._internal_gas_cost());
  }
  if (from.memory_size() != 0) {
    _internal_set_memory_size(from._internal_memory_size());
  }
  if (from.memory_offset() != 0) {
    _internal_set_memory_offset(from._internal_memory_offset());
  }
  if (from.gas_refund() != 0) {
    _internal_set_gas_refund(from._internal_gas_refund());
  }
  if (from.depth() != 0) {
    _internal_set_depth(from._internal_depth());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void ExecutionTraceStep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.ExecutionTraceStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionTraceStep::CopyFrom(const ExecutionTraceStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ExecutionTraceStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionTraceStep::IsInitialized() const {
  return true;
}

void ExecutionTraceStep::InternalSwap(ExecutionTraceStep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stack_.InternalSwap(&other->stack_);
  storage_.Swap(&other->storage_);
  op_.Swap(&other->op_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memory_.Swap(&other->memory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_data_.Swap(&other->return_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionTraceStep, error_)
      + sizeof(ExecutionTraceStep::error_)
      - PROTOBUF_FIELD_OFFSET(ExecutionTraceStep, pc_)>(
          reinterpret_cast<char*>(&pc_),
          reinterpret_cast<char*>(&other->pc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionTraceStep::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace executor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequest* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchResponse* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::GetFlushStatusResponse* Arena::CreateMaybeMessage< ::executor::v1::GetFlushStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::GetFlushStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TraceConfig* Arena::CreateMaybeMessage< ::executor::v1::TraceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TraceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::InfoReadWrite* Arena::CreateMaybeMessage< ::executor::v1::InfoReadWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::InfoReadWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::CallTrace* Arena::CreateMaybeMessage< ::executor::v1::CallTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::CallTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TransactionContext* Arena::CreateMaybeMessage< ::executor::v1::TransactionContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TransactionContext >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TransactionStep* Arena::CreateMaybeMessage< ::executor::v1::TransactionStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TransactionStep >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::Contract* Arena::CreateMaybeMessage< ::executor::v1::Contract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::Contract >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessTransactionResponse* Arena::CreateMaybeMessage< ::executor::v1::ProcessTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::Log* Arena::CreateMaybeMessage< ::executor::v1::Log >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::Log >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ExecutionTraceStep_StorageEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::ExecutionTraceStep_StorageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ExecutionTraceStep_StorageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ExecutionTraceStep* Arena::CreateMaybeMessage< ::executor::v1::ExecutionTraceStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ExecutionTraceStep >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
